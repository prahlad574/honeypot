#!/usr/bin/python
# Copyright 2011 Google Inc. All Rights Reserved.
#
# AUTO-GENERATED BY parse-schema.py
#
# DO NOT EDIT!!
#
#pylint: disable-msg=C6202
#pylint: disable-msg=C6409
#pylint: disable-msg=C6310
# These should not actually be necessary (bugs in gpylint?):
#pylint: disable-msg=E1101
#pylint: disable-msg=W0231
#
"""Auto-generated from spec: urn:broadband-forum-org:tr-181-2-0."""

import core


class Device_v2_0(core.Exporter):
  """Represents Device_v2_0."""

  def __init__(self, **defaults):
    core.Exporter.__init__(self, defaults=defaults)
    self.Export(params=['SmartCardReaderNumberOfEntries',
                        'UserNumberOfEntries'],
                objects=['DLNA',
                         'Device',
                         'DeviceInfo',
                         'DownloadAvailability',
                         'DownloadDiagnostics',
                         'Firewall',
                         'ManagementServer',
                         'NSLookupDiagnostics',
                         'PeriodicStatistics',
                         'SelfTestDiagnostics',
                         'Time',
                         'UDPEchoConfig',
                         'UPnP',
                         'USBHosts',
                         'UploadDiagnostics',
                         'UserInterface'],
                lists=['SmartCardReader',
                       'User'])

  class DLNA(core.Exporter):
    """Represents Device_v2_0.DLNA."""

    def __init__(self, **defaults):
      core.Exporter.__init__(self, defaults=defaults)
      self.Export(objects=['Capabilities'])

    class Capabilities(core.Exporter):
      """Represents Device_v2_0.DLNA.Capabilities."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['AVClassProfileID',
                            'AudioClassProfileID',
                            'DeviceCapability',
                            'HIDDeviceClass',
                            'HNDDeviceClass',
                            'ImageClassProfileID',
                            'MediaCollectionProfileID',
                            'PrinterClassProfileID'])

  class Device(core.Exporter):
    """Represents Device_v2_0.Device."""

    def __init__(self, **defaults):
      core.Exporter.__init__(self, defaults=defaults)
      self.Export(params=['InterfaceStackNumberOfEntries'],
                  objects=['ATM',
                           'Bridging',
                           'CaptivePortal',
                           'DHCPv4',
                           'DNS',
                           'DSL',
                           'Ethernet',
                           'GatewayInfo',
                           'HPNA',
                           'HomePlug',
                           'Hosts',
                           'IEEE8021x',
                           'IP',
                           'LANConfigSecurity',
                           'ManagementServer',
                           'MoCA',
                           'NAT',
                           'PPP',
                           'PTM',
                           'QoS',
                           'Routing',
                           'Services',
                           'SmartCardReaders',
                           'UPA',
                           'USB',
                           'Users',
                           'WiFi'],
                  lists=['InterfaceStack'])

    class ATM(core.Exporter):
      """Represents Device_v2_0.Device.ATM."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['LinkNumberOfEntries'],
                    objects=['Diagnostics'],
                    lists=['Link'])

      class Diagnostics(core.Exporter):
        """Represents Device_v2_0.Device.ATM.Diagnostics."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(objects=['F5Loopback'])

        class F5Loopback(core.Exporter):
          """Represents Device_v2_0.Device.ATM.Diagnostics.F5Loopback."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['AverageResponseTime',
                                'DiagnosticsState',
                                'FailureCount',
                                'Interface',
                                'MaximumResponseTime',
                                'MinimumResponseTime',
                                'NumberOfRepetitions',
                                'SuccessCount',
                                'Timeout'])

      class Link(core.Exporter):
        """Represents Device_v2_0.Device.ATM.Link.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['AAL',
                              'Alias',
                              'AutoConfig',
                              'DestinationAddress',
                              'Enable',
                              'Encapsulation',
                              'FCSPreserved',
                              'LastChange',
                              'LinkType',
                              'LowerLayers',
                              'Name',
                              'Status',
                              'VCSearchList'],
                      objects=['QoS',
                               'Stats'])

        class QoS(core.Exporter):
          """Represents Device_v2_0.Device.ATM.Link.{i}.QoS."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['MaximumBurstSize',
                                'PeakCellRate',
                                'QoSClass',
                                'SustainableCellRate'])

        class Stats(core.Exporter):
          """Represents Device_v2_0.Device.ATM.Link.{i}.Stats."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['BroadcastPacketsReceived',
                                'BroadcastPacketsSent',
                                'BytesReceived',
                                'BytesSent',
                                'CRCErrors',
                                'DiscardPacketsReceived',
                                'DiscardPacketsSent',
                                'ErrorsReceived',
                                'ErrorsSent',
                                'HECErrors',
                                'MulticastPacketsReceived',
                                'MulticastPacketsSent',
                                'PacketsReceived',
                                'PacketsSent',
                                'ReceivedBlocks',
                                'TransmittedBlocks',
                                'UnicastPacketsReceived',
                                'UnicastPacketsSent',
                                'UnknownProtoPacketsReceived'])

    class Bridging(core.Exporter):
      """Represents Device_v2_0.Device.Bridging."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['BridgeNumberOfEntries',
                            'FilterNumberOfEntries',
                            'MaxBridgeEntries',
                            'MaxDBridgeEntries',
                            'MaxFilterEntries',
                            'MaxQBridgeEntries',
                            'MaxVLANEntries'],
                    lists=['Bridge',
                           'Filter'])

      class Bridge(core.Exporter):
        """Represents Device_v2_0.Device.Bridging.Bridge.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'Enable',
                              'PortNumberOfEntries',
                              'Standard',
                              'Status',
                              'VLANNumberOfEntries',
                              'VLANPortNumberOfEntries'],
                      lists=['Port',
                             'VLAN',
                             'VLANPort'])

        class Port(core.Exporter):
          """Represents Device_v2_0.Device.Bridging.Bridge.{i}.Port.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['AcceptableFrameTypes',
                                'Alias',
                                'DefaultUserPriority',
                                'Enable',
                                'IngressFiltering',
                                'LastChange',
                                'LowerLayers',
                                'ManagementPort',
                                'Name',
                                'PVID',
                                'PortState',
                                'PriorityRegeneration',
                                'PriorityTagging',
                                'Status'],
                        objects=['Stats'])

          class Stats(core.Exporter):
            """Represents Device_v2_0.Device.Bridging.Bridge.{i}.Port.{i}.Stats."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['BroadcastPacketsReceived',
                                  'BroadcastPacketsSent',
                                  'BytesReceived',
                                  'BytesSent',
                                  'DiscardPacketsReceived',
                                  'DiscardPacketsSent',
                                  'ErrorsReceived',
                                  'ErrorsSent',
                                  'MulticastPacketsReceived',
                                  'MulticastPacketsSent',
                                  'PacketsReceived',
                                  'PacketsSent',
                                  'UnicastPacketsReceived',
                                  'UnicastPacketsSent',
                                  'UnknownProtoPacketsReceived'])

        class VLAN(core.Exporter):
          """Represents Device_v2_0.Device.Bridging.Bridge.{i}.VLAN.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Alias',
                                'Enable',
                                'Name',
                                'VLANID'])

        class VLANPort(core.Exporter):
          """Represents Device_v2_0.Device.Bridging.Bridge.{i}.VLANPort.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Alias',
                                'Enable',
                                'Port',
                                'Untagged',
                                'VLAN'])

      class Filter(core.Exporter):
        """Represents Device_v2_0.Device.Bridging.Filter.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'Bridge',
                              'DestMACAddressFilterExclude',
                              'DestMACAddressFilterList',
                              'DestMACFromClientIDFilter',
                              'DestMACFromClientIDFilterExclude',
                              'DestMACFromUserClassIDFilter',
                              'DestMACFromUserClassIDFilterExclude',
                              'DestMACFromVendorClassIDFilter',
                              'DestMACFromVendorClassIDFilterExclude',
                              'DestMACFromVendorClassIDMode',
                              'Enable',
                              'EthertypeFilterExclude',
                              'EthertypeFilterList',
                              'Interface',
                              'Order',
                              'SourceMACAddressFilterExclude',
                              'SourceMACAddressFilterList',
                              'SourceMACFromClientIDFilter',
                              'SourceMACFromClientIDFilterExclude',
                              'SourceMACFromUserClassIDFilter',
                              'SourceMACFromUserClassIDFilterExclude',
                              'SourceMACFromVendorClassIDFilter',
                              'SourceMACFromVendorClassIDFilterExclude',
                              'SourceMACFromVendorClassIDMode',
                              'Status',
                              'VLANIDFilter'])

    class CaptivePortal(core.Exporter):
      """Represents Device_v2_0.Device.CaptivePortal."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['AllowedList',
                            'Enable',
                            'Status',
                            'URL'])

    class DHCPv4(core.Exporter):
      """Represents Device_v2_0.Device.DHCPv4."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['ClientNumberOfEntries'],
                    objects=['Relay',
                             'Server'],
                    lists=['Client'])

      class Client(core.Exporter):
        """Represents Device_v2_0.Device.DHCPv4.Client.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'DHCPServer',
                              'DHCPStatus',
                              'DNSServers',
                              'Enable',
                              'IPAddress',
                              'IPRouters',
                              'Interface',
                              'LeaseTimeRemaining',
                              'PassthroughDHCPPool',
                              'PassthroughEnable',
                              'Renew',
                              'ReqOptionNumberOfEntries',
                              'SentOptionNumberOfEntries',
                              'Status',
                              'SubnetMask'],
                      lists=['ReqOption',
                             'SentOption'])

        class ReqOption(core.Exporter):
          """Represents Device_v2_0.Device.DHCPv4.Client.{i}.ReqOption.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Alias',
                                'Enable',
                                'Order',
                                'Tag',
                                'Value'])

        class SentOption(core.Exporter):
          """Represents Device_v2_0.Device.DHCPv4.Client.{i}.SentOption.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Alias',
                                'Enable',
                                'Tag',
                                'Value'])

      class Relay(core.Exporter):
        """Represents Device_v2_0.Device.DHCPv4.Relay."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Enable',
                              'ForwardingNumberOfEntries',
                              'Status'],
                      lists=['Forwarding'])

        class Forwarding(core.Exporter):
          """Represents Device_v2_0.Device.DHCPv4.Relay.Forwarding.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Alias',
                                'Chaddr',
                                'ChaddrExclude',
                                'ChaddrMask',
                                'ClientID',
                                'ClientIDExclude',
                                'DHCPServerIPAddress',
                                'Enable',
                                'Interface',
                                'LocallyServed',
                                'Order',
                                'Status',
                                'UserClassID',
                                'UserClassIDExclude',
                                'VendorClassID',
                                'VendorClassIDExclude',
                                'VendorClassIDMode'])

      class Server(core.Exporter):
        """Represents Device_v2_0.Device.DHCPv4.Server."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Enable',
                              'PoolNumberOfEntries'],
                      lists=['Pool'])

        class Pool(core.Exporter):
          """Represents Device_v2_0.Device.DHCPv4.Server.Pool.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Alias',
                                'Chaddr',
                                'ChaddrExclude',
                                'ChaddrMask',
                                'ClientID',
                                'ClientIDExclude',
                                'DNSServers',
                                'DomainName',
                                'Enable',
                                'IPRouters',
                                'Interface',
                                'LeaseTime',
                                'MaxAddress',
                                'MinAddress',
                                'OptionNumberOfEntries',
                                'Order',
                                'ReservedAddresses',
                                'StaticAddressNumberOfEntries',
                                'Status',
                                'SubnetMask',
                                'UserClassID',
                                'UserClassIDExclude',
                                'VendorClassID',
                                'VendorClassIDExclude',
                                'VendorClassIDMode'],
                        lists=['Option',
                               'StaticAddress'])

          class Option(core.Exporter):
            """Represents Device_v2_0.Device.DHCPv4.Server.Pool.{i}.Option.{i}."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['Alias',
                                  'Enable',
                                  'Tag',
                                  'Value'])

          class StaticAddress(core.Exporter):
            """Represents Device_v2_0.Device.DHCPv4.Server.Pool.{i}.StaticAddress.{i}."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['Alias',
                                  'Chaddr',
                                  'Enable',
                                  'Yiaddr'])

    class DNS(core.Exporter):
      """Represents Device_v2_0.Device.DNS."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(objects=['Client',
                             'Diagnostics',
                             'Relay'])

      class Client(core.Exporter):
        """Represents Device_v2_0.Device.DNS.Client."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Enable',
                              'ServerNumberOfEntries',
                              'Status'],
                      lists=['Server'])

        class Server(core.Exporter):
          """Represents Device_v2_0.Device.DNS.Client.Server.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Alias',
                                'DNSServer',
                                'Enable',
                                'Interface',
                                'Status',
                                'Type'])

      class Diagnostics(core.Exporter):
        """Represents Device_v2_0.Device.DNS.Diagnostics."""
        pass

      class Relay(core.Exporter):
        """Represents Device_v2_0.Device.DNS.Relay."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Enable',
                              'ForwardNumberOfEntries',
                              'Status'],
                      lists=['Forwarding'])

        class Forwarding(core.Exporter):
          """Represents Device_v2_0.Device.DNS.Relay.Forwarding.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Alias',
                                'DNSServer',
                                'Enable',
                                'Interface',
                                'Status',
                                'Type'])

    class DSL(core.Exporter):
      """Represents Device_v2_0.Device.DSL."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['BondingGroupNumberOfEntries',
                            'ChannelNumberOfEntries',
                            'LineNumberOfEntries'],
                    objects=['Diagnostics'],
                    lists=['BondingGroup',
                           'Channel',
                           'Line'])

      class BondingGroup(core.Exporter):
        """Represents Device_v2_0.Device.DSL.BondingGroup.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'BondScheme',
                              'BondSchemesSupported',
                              'BondedChannelNumberOfEntries',
                              'DownstreamDifferentialDelayTolerance',
                              'Enable',
                              'GroupCapacity',
                              'GroupID',
                              'GroupStatus',
                              'LastChange',
                              'LowerLayers',
                              'Name',
                              'RunningTime',
                              'Status',
                              'TargetDownRate',
                              'TargetUpRate',
                              'ThreshLowDownRate',
                              'ThreshLowUpRate',
                              'UpstreamDifferentialDelayTolerance'],
                      objects=['Ethernet',
                               'Stats'],
                      lists=['BondedChannel'])

        class BondedChannel(core.Exporter):
          """Represents Device_v2_0.Device.DSL.BondingGroup.{i}.BondedChannel.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Alias',
                                'Channel'],
                        objects=['Ethernet'])

          class Ethernet(core.Exporter):
            """Represents Device_v2_0.Device.DSL.BondingGroup.{i}.BondedChannel.{i}.Ethernet."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(objects=['Stats'])

            class Stats(core.Exporter):
              """Represents Device_v2_0.Device.DSL.BondingGroup.{i}.BondedChannel.{i}.Ethernet.Stats."""

              def __init__(self, **defaults):
                core.Exporter.__init__(self, defaults=defaults)
                self.Export(params=['AlignmentErrorsReceived',
                                    'CRCErrorsReceived',
                                    'FramesDropped',
                                    'LongPacketsReceived',
                                    'OverflowErrorsReceived',
                                    'PauseFramesReceived',
                                    'ShortPacketsReceived',
                                    'UnderflowErrorsSent'])

        class Ethernet(core.Exporter):
          """Represents Device_v2_0.Device.DSL.BondingGroup.{i}.Ethernet."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(objects=['Stats'])

          class Stats(core.Exporter):
            """Represents Device_v2_0.Device.DSL.BondingGroup.{i}.Ethernet.Stats."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['AlignmentErrorsReceived',
                                  'CRCErrorsReceived',
                                  'FramesDropped',
                                  'LongPacketsReceived',
                                  'OverflowErrorsReceived',
                                  'PAFBadFragments',
                                  'PAFErrors',
                                  'PAFLargeFragments',
                                  'PAFLateFragments',
                                  'PAFLostEnds',
                                  'PAFLostFragments',
                                  'PAFLostStarts',
                                  'PAFOverflows',
                                  'PAFSmallFragments',
                                  'PauseFramesSent',
                                  'ShortPacketsReceived'])

        class Stats(core.Exporter):
          """Represents Device_v2_0.Device.DSL.BondingGroup.{i}.Stats."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['BroadcastPacketsReceived',
                                'BroadcastPacketsSent',
                                'BytesReceived',
                                'BytesSent',
                                'CurrentDayStart',
                                'DiscardPacketsReceived',
                                'DiscardPacketsSent',
                                'ErrorsReceived',
                                'ErrorsSent',
                                'MulticastPacketsReceived',
                                'MulticastPacketsSent',
                                'PacketsReceived',
                                'PacketsSent',
                                'QuarterHourStart',
                                'TotalStart',
                                'UnicastPacketsReceived',
                                'UnicastPacketsSent',
                                'UnknownProtoPacketsReceived'],
                        objects=['CurrentDay',
                                 'QuarterHour',
                                 'Total'])

          class CurrentDay(core.Exporter):
            """Represents Device_v2_0.Device.DSL.BondingGroup.{i}.Stats.CurrentDay."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['DownstreamDifferentialDelay',
                                  'DownstreamPacketLoss',
                                  'DownstreamRate',
                                  'ErroredSeconds',
                                  'FailureCount',
                                  'FailureReasons',
                                  'SeverelyErroredSeconds',
                                  'UnavailableSeconds',
                                  'UpstreamDifferentialDelay',
                                  'UpstreamPacketLoss',
                                  'UpstreamRate'])

          class QuarterHour(core.Exporter):
            """Represents Device_v2_0.Device.DSL.BondingGroup.{i}.Stats.QuarterHour."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['DownstreamDifferentialDelay',
                                  'DownstreamPacketLoss',
                                  'DownstreamRate',
                                  'ErroredSeconds',
                                  'FailureCount',
                                  'FailureReasons',
                                  'SeverelyErroredSeconds',
                                  'UnavailableSeconds',
                                  'UpstreamDifferentialDelay',
                                  'UpstreamPacketLoss',
                                  'UpstreamRate'])

          class Total(core.Exporter):
            """Represents Device_v2_0.Device.DSL.BondingGroup.{i}.Stats.Total."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['DownstreamDifferentialDelay',
                                  'DownstreamPacketLoss',
                                  'DownstreamRate',
                                  'ErroredSeconds',
                                  'FailureCount',
                                  'FailureReasons',
                                  'SeverelyErroredSeconds',
                                  'UnavailableSeconds',
                                  'UpstreamDifferentialDelay',
                                  'UpstreamPacketLoss',
                                  'UpstreamRate'])

      class Channel(core.Exporter):
        """Represents Device_v2_0.Device.DSL.Channel.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['ACTINP',
                              'ActualInterleavingDelay',
                              'Alias',
                              'DownstreamCurrRate',
                              'Enable',
                              'INPREPORT',
                              'INTLVBLOCK',
                              'INTLVDEPTH',
                              'LPATH',
                              'LSYMB',
                              'LastChange',
                              'LinkEncapsulationSupported',
                              'LinkEncapsulationUsed',
                              'LowerLayers',
                              'NFEC',
                              'Name',
                              'RFEC',
                              'Status',
                              'UpstreamCurrRate'],
                      objects=['Stats'])

        class Stats(core.Exporter):
          """Represents Device_v2_0.Device.DSL.Channel.{i}.Stats."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['BytesReceived',
                                'BytesSent',
                                'CurrentDayStart',
                                'DiscardPacketsReceived',
                                'DiscardPacketsSent',
                                'ErrorsReceived',
                                'ErrorsSent',
                                'LastShowtimeStart',
                                'PacketsReceived',
                                'PacketsSent',
                                'QuarterHourStart',
                                'ShowtimeStart',
                                'TotalStart'],
                        objects=['CurrentDay',
                                 'LastShowtime',
                                 'QuarterHour',
                                 'Showtime',
                                 'Total'])

          class CurrentDay(core.Exporter):
            """Represents Device_v2_0.Device.DSL.Channel.{i}.Stats.CurrentDay."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['XTUCCRCErrors',
                                  'XTUCFECErrors',
                                  'XTUCHECErrors',
                                  'XTURCRCErrors',
                                  'XTURFECErrors',
                                  'XTURHECErrors'])

          class LastShowtime(core.Exporter):
            """Represents Device_v2_0.Device.DSL.Channel.{i}.Stats.LastShowtime."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['XTUCCRCErrors',
                                  'XTUCFECErrors',
                                  'XTUCHECErrors',
                                  'XTURCRCErrors',
                                  'XTURFECErrors',
                                  'XTURHECErrors'])

          class QuarterHour(core.Exporter):
            """Represents Device_v2_0.Device.DSL.Channel.{i}.Stats.QuarterHour."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['XTUCCRCErrors',
                                  'XTUCFECErrors',
                                  'XTUCHECErrors',
                                  'XTURCRCErrors',
                                  'XTURFECErrors',
                                  'XTURHECErrors'])

          class Showtime(core.Exporter):
            """Represents Device_v2_0.Device.DSL.Channel.{i}.Stats.Showtime."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['XTUCCRCErrors',
                                  'XTUCFECErrors',
                                  'XTUCHECErrors',
                                  'XTURCRCErrors',
                                  'XTURFECErrors',
                                  'XTURHECErrors'])

          class Total(core.Exporter):
            """Represents Device_v2_0.Device.DSL.Channel.{i}.Stats.Total."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['XTUCCRCErrors',
                                  'XTUCFECErrors',
                                  'XTUCHECErrors',
                                  'XTURCRCErrors',
                                  'XTURFECErrors',
                                  'XTURHECErrors'])

      class Diagnostics(core.Exporter):
        """Represents Device_v2_0.Device.DSL.Diagnostics."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(objects=['ADSLLineTest'])

        class ADSLLineTest(core.Exporter):
          """Represents Device_v2_0.Device.DSL.Diagnostics.ADSLLineTest."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['ACTATPds',
                                'ACTATPus',
                                'ACTPSDds',
                                'ACTPSDus',
                                'BITSpsds',
                                'BITSpsus',
                                'DiagnosticsState',
                                'HLINGds',
                                'HLINGus',
                                'HLINSCds',
                                'HLINSCus',
                                'HLINpsds',
                                'HLINpsus',
                                'HLOGGds',
                                'HLOGGus',
                                'HLOGMTds',
                                'HLOGMTus',
                                'HLOGpsds',
                                'HLOGpsus',
                                'Interface',
                                'LATNpbds',
                                'LATNpbus',
                                'QLNGds',
                                'QLNGus',
                                'QLNMTds',
                                'QLNMTus',
                                'QLNpsds',
                                'QLNpsus',
                                'SATNds',
                                'SATNus',
                                'SNRGds',
                                'SNRGus',
                                'SNRMTds',
                                'SNRMTus',
                                'SNRpsds',
                                'SNRpsus'])

      class Line(core.Exporter):
        """Represents Device_v2_0.Device.DSL.Line.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['ACTSNRMODEds',
                              'ACTSNRMODEus',
                              'ACTUALCE',
                              'Alias',
                              'AllowedProfiles',
                              'CurrentProfile',
                              'DownstreamAttenuation',
                              'DownstreamMaxBitRate',
                              'DownstreamNoiseMargin',
                              'DownstreamPower',
                              'Enable',
                              'FirmwareVersion',
                              'INMCCds',
                              'INMIATOds',
                              'INMIATSds',
                              'INMINPEQMODEds',
                              'LIMITMASK',
                              'LastChange',
                              'LastStateTransmittedDownstream',
                              'LastStateTransmittedUpstream',
                              'LineEncoding',
                              'LineNumber',
                              'LinkStatus',
                              'LowerLayers',
                              'MREFPSDds',
                              'MREFPSDus',
                              'Name',
                              'PowerManagementState',
                              'SNRMpbds',
                              'SNRMpbus',
                              'StandardUsed',
                              'StandardsSupported',
                              'Status',
                              'SuccessFailureCause',
                              'TRELLISds',
                              'TRELLISus',
                              'UPBOKLE',
                              'US0MASK',
                              'Upstream',
                              'UpstreamAttenuation',
                              'UpstreamMaxBitRate',
                              'UpstreamNoiseMargin',
                              'UpstreamPower',
                              'VirtualNoisePSDds',
                              'VirtualNoisePSDus',
                              'XTUCANSIRev',
                              'XTUCANSIStd',
                              'XTUCCountry',
                              'XTUCVendor',
                              'XTURANSIRev',
                              'XTURANSIStd',
                              'XTURCountry',
                              'XTURVendor'],
                      objects=['Stats',
                               'TestParams'])

        class Stats(core.Exporter):
          """Represents Device_v2_0.Device.DSL.Line.{i}.Stats."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['BytesReceived',
                                'BytesSent',
                                'CurrentDayStart',
                                'DiscardPacketsReceived',
                                'DiscardPacketsSent',
                                'ErrorsReceived',
                                'ErrorsSent',
                                'LastShowtimeStart',
                                'PacketsReceived',
                                'PacketsSent',
                                'QuarterHourStart',
                                'ShowtimeStart',
                                'TotalStart'],
                        objects=['CurrentDay',
                                 'LastShowtime',
                                 'QuarterHour',
                                 'Showtime',
                                 'Total'])

          class CurrentDay(core.Exporter):
            """Represents Device_v2_0.Device.DSL.Line.{i}.Stats.CurrentDay."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['ErroredSecs',
                                  'SeverelyErroredSecs'])

          class LastShowtime(core.Exporter):
            """Represents Device_v2_0.Device.DSL.Line.{i}.Stats.LastShowtime."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['ErroredSecs',
                                  'SeverelyErroredSecs'])

          class QuarterHour(core.Exporter):
            """Represents Device_v2_0.Device.DSL.Line.{i}.Stats.QuarterHour."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['ErroredSecs',
                                  'SeverelyErroredSecs'])

          class Showtime(core.Exporter):
            """Represents Device_v2_0.Device.DSL.Line.{i}.Stats.Showtime."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['ErroredSecs',
                                  'SeverelyErroredSecs'])

          class Total(core.Exporter):
            """Represents Device_v2_0.Device.DSL.Line.{i}.Stats.Total."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['ErroredSecs',
                                  'SeverelyErroredSecs'])

        class TestParams(core.Exporter):
          """Represents Device_v2_0.Device.DSL.Line.{i}.TestParams."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['HLOGGds',
                                'HLOGGus',
                                'HLOGMTds',
                                'HLOGMTus',
                                'HLOGpsds',
                                'HLOGpsus',
                                'LATNds',
                                'LATNus',
                                'QLNGds',
                                'QLNGus',
                                'QLNMTds',
                                'QLNMTus',
                                'QLNpsds',
                                'QLNpsus',
                                'SATNds',
                                'SATNus',
                                'SNRGds',
                                'SNRGus',
                                'SNRMTds',
                                'SNRMTus',
                                'SNRpsds',
                                'SNRpsus'])

    class Ethernet(core.Exporter):
      """Represents Device_v2_0.Device.Ethernet."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['InterfaceNumberOfEntries',
                            'LinkNumberOfEntries',
                            'VLANTerminationNumberOfEntries'],
                    lists=['Interface',
                           'Link',
                           'VLANTermination'])

      class Interface(core.Exporter):
        """Represents Device_v2_0.Device.Ethernet.Interface.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'DuplexMode',
                              'Enable',
                              'LastChange',
                              'LowerLayers',
                              'MACAddress',
                              'MaxBitRate',
                              'Name',
                              'Status',
                              'Upstream'],
                      objects=['Stats'])

        class Stats(core.Exporter):
          """Represents Device_v2_0.Device.Ethernet.Interface.{i}.Stats."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['BroadcastPacketsReceived',
                                'BroadcastPacketsSent',
                                'BytesReceived',
                                'BytesSent',
                                'DiscardPacketsReceived',
                                'DiscardPacketsSent',
                                'ErrorsReceived',
                                'ErrorsSent',
                                'MulticastPacketsReceived',
                                'MulticastPacketsSent',
                                'PacketsReceived',
                                'PacketsSent',
                                'UnicastPacketsReceived',
                                'UnicastPacketsSent',
                                'UnknownProtoPacketsReceived'])

      class Link(core.Exporter):
        """Represents Device_v2_0.Device.Ethernet.Link.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'Enable',
                              'LastChange',
                              'LowerLayers',
                              'MACAddress',
                              'Name',
                              'PriorityTagging',
                              'Status'],
                      objects=['Stats'])

        class Stats(core.Exporter):
          """Represents Device_v2_0.Device.Ethernet.Link.{i}.Stats."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['BroadcastPacketsReceived',
                                'BroadcastPacketsSent',
                                'BytesReceived',
                                'BytesSent',
                                'DiscardPacketsReceived',
                                'DiscardPacketsSent',
                                'ErrorsReceived',
                                'ErrorsSent',
                                'MulticastPacketsReceived',
                                'MulticastPacketsSent',
                                'PacketsReceived',
                                'PacketsSent',
                                'UnicastPacketsReceived',
                                'UnicastPacketsSent',
                                'UnknownProtoPacketsReceived'])

      class VLANTermination(core.Exporter):
        """Represents Device_v2_0.Device.Ethernet.VLANTermination.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'Enable',
                              'LastChange',
                              'LowerLayers',
                              'Name',
                              'Status',
                              'VLANID'],
                      objects=['Stats'])

        class Stats(core.Exporter):
          """Represents Device_v2_0.Device.Ethernet.VLANTermination.{i}.Stats."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['BroadcastPacketsReceived',
                                'BroadcastPacketsSent',
                                'BytesReceived',
                                'BytesSent',
                                'DiscardPacketsReceived',
                                'DiscardPacketsSent',
                                'ErrorsReceived',
                                'ErrorsSent',
                                'MulticastPacketsReceived',
                                'MulticastPacketsSent',
                                'PacketsReceived',
                                'PacketsSent',
                                'UnicastPacketsReceived',
                                'UnicastPacketsSent',
                                'UnknownProtoPacketsReceived'])

    class GatewayInfo(core.Exporter):
      """Represents Device_v2_0.Device.GatewayInfo."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['ManufacturerOUI',
                            'ProductClass',
                            'SerialNumber'])

    class HPNA(core.Exporter):
      """Represents Device_v2_0.Device.HPNA."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['InterfaceNumberOfEntries'],
                    objects=['Diagnostics'],
                    lists=['Interface'])

      class Diagnostics(core.Exporter):
        """Represents Device_v2_0.Device.HPNA.Diagnostics."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(objects=['PHYThroughput',
                               'PerformanceMonitoring'])

        class PHYThroughput(core.Exporter):
          """Represents Device_v2_0.Device.HPNA.Diagnostics.PHYThroughput."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['BurstInterval',
                                'DiagnosticsState',
                                'Interface',
                                'NumPacketsInBurst',
                                'PayloadDataGen',
                                'PayloadEncoding',
                                'PayloadType',
                                'PriorityLevel',
                                'ResultNumberOfEntries',
                                'TestPacketPayloadLength'],
                        lists=['Result'])

          class Result(core.Exporter):
            """Represents Device_v2_0.Device.HPNA.Diagnostics.PHYThroughput.Result.{i}."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['Attenuation',
                                  'BaudRate',
                                  'DestMACAddress',
                                  'PHYRate',
                                  'PacketsReceived',
                                  'SNR',
                                  'SrcMACAddress'])

        class PerformanceMonitoring(core.Exporter):
          """Represents Device_v2_0.Device.HPNA.Diagnostics.PerformanceMonitoring."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['DiagnosticsState',
                                'Interface',
                                'SampleInterval'],
                        objects=['Channels',
                                 'Nodes'])

          class Channels(core.Exporter):
            """Represents Device_v2_0.Device.HPNA.Diagnostics.PerformanceMonitoring.Channels."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['ChannelNumberOfEntries',
                                  'TimeStamp'],
                          lists=['Channel'])

            class Channel(core.Exporter):
              """Represents Device_v2_0.Device.HPNA.Diagnostics.PerformanceMonitoring.Channels.Channel.{i}."""

              def __init__(self, **defaults):
                core.Exporter.__init__(self, defaults=defaults)
                self.Export(params=['BaudRate',
                                    'FlowSpec',
                                    'HPNADestMACAddress',
                                    'HPNASrcMACAddress',
                                    'HostDestMACAddress',
                                    'HostSrcMACAddress',
                                    'LARQPacketsReceived',
                                    'PHYRate',
                                    'PacketsReceived',
                                    'PacketsSent',
                                    'SNR'])

          class Nodes(core.Exporter):
            """Represents Device_v2_0.Device.HPNA.Diagnostics.PerformanceMonitoring.Nodes."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['CurrentEnd',
                                  'CurrentStart',
                                  'NodeNumberOfEntries'],
                          lists=['Node'])

            class Node(core.Exporter):
              """Represents Device_v2_0.Device.HPNA.Diagnostics.PerformanceMonitoring.Nodes.Node.{i}."""

              def __init__(self, **defaults):
                core.Exporter.__init__(self, defaults=defaults)
                self.Export(params=['BroadcastPacketsInternalControl',
                                    'BroadcastPacketsReceived',
                                    'BroadcastPacketsSent',
                                    'BroadcastPacketsSentWire',
                                    'BytesReceived',
                                    'BytesSent',
                                    'ControlReplyLocal',
                                    'ControlReplyRemote',
                                    'ControlRequestLocal',
                                    'ControlRequestRemote',
                                    'MACAddress',
                                    'MulticastPacketsReceived',
                                    'MulticastPacketsSent',
                                    'MulticastPacketsSentWire',
                                    'NodeUtilization',
                                    'PacketsCrcErrored',
                                    'PacketsCrcErroredHost',
                                    'PacketsInternalControl',
                                    'PacketsReceived',
                                    'PacketsReceivedForwardUnknown',
                                    'PacketsReceivedQueued',
                                    'PacketsSent',
                                    'PacketsSentWire',
                                    'PacketsShortErrored',
                                    'PacketsShortErroredHost',
                                    'RxPacketsDropped',
                                    'TxPacketsDropped'])

      class Interface(core.Exporter):
        """Represents Device_v2_0.Device.HPNA.Interface.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'AssociatedDeviceNumberOfEntries',
                              'ConnectionType',
                              'DefaultNonLARQPER',
                              'Enable',
                              'FirmwareVersion',
                              'IsMaster',
                              'LARQEnable',
                              'LastChange',
                              'LowerLayers',
                              'MACAddress',
                              'MTU',
                              'MasterSelectionMode',
                              'MaxBitRate',
                              'MinMulticastRate',
                              'Name',
                              'NegMulticastRate',
                              'NetworkUtilization',
                              'NodeID',
                              'NoiseMargin',
                              'PossibleConnectionTypes',
                              'PossibleSpectralModes',
                              'SpectralMode',
                              'Status',
                              'Synced',
                              'TotalSyncTime',
                              'Upstream'],
                      objects=['QoS',
                               'Stats'],
                      lists=['AssociatedDevice'])

        class AssociatedDevice(core.Exporter):
          """Represents Device_v2_0.Device.HPNA.Interface.{i}.AssociatedDevice.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Active',
                                'IsMaster',
                                'MACAddress',
                                'MaxBitRate',
                                'NodeID',
                                'PHYDiagnosticsEnable',
                                'Synced',
                                'TotalSyncTime'])

        class QoS(core.Exporter):
          """Represents Device_v2_0.Device.HPNA.Interface.{i}.QoS."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['FlowSpecNumberOfEntries'],
                        lists=['FlowSpec'])

          class FlowSpec(core.Exporter):
            """Represents Device_v2_0.Device.HPNA.Interface.{i}.QoS.FlowSpec.{i}."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['Alias',
                                  'AvgRate',
                                  'Enable',
                                  'FlowType',
                                  'Jitter',
                                  'Latency',
                                  'MaxRate',
                                  'MinRate',
                                  'PER',
                                  'PacketSize',
                                  'Priority',
                                  'Status',
                                  'Timeout',
                                  'TrafficClasses'])

        class Stats(core.Exporter):
          """Represents Device_v2_0.Device.HPNA.Interface.{i}.Stats."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['BroadcastPacketsReceived',
                                'BroadcastPacketsSent',
                                'BytesReceived',
                                'BytesSent',
                                'DiscardPacketsReceived',
                                'DiscardPacketsSent',
                                'ErrorsReceived',
                                'ErrorsSent',
                                'MulticastPacketsReceived',
                                'MulticastPacketsSent',
                                'PacketsReceived',
                                'PacketsSent',
                                'UnicastPacketsReceived',
                                'UnicastPacketsSent',
                                'UnknownProtoPacketsReceived'])

    class HomePlug(core.Exporter):
      """Represents Device_v2_0.Device.HomePlug."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['InterfaceNumberOfEntries'],
                    lists=['Interface'])

      class Interface(core.Exporter):
        """Represents Device_v2_0.Device.HomePlug.Interface.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'AssociatedDeviceNumberOfEntries',
                              'Enable',
                              'FirmwareVersion',
                              'ForceCCo',
                              'LastChange',
                              'LogicalNetwork',
                              'LowerLayers',
                              'MACAddress',
                              'MaxBitRate',
                              'Name',
                              'NetworkPassword',
                              'OtherNetworksPresent',
                              'Status',
                              'Upstream',
                              'Version'],
                      objects=['Stats'],
                      lists=['AssociatedDevice'])

        class AssociatedDevice(core.Exporter):
          """Represents Device_v2_0.Device.HomePlug.Interface.{i}.AssociatedDevice.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Active',
                                'AvgAttenuation',
                                'EndStationMACs',
                                'MACAddress',
                                'RxPhyRate',
                                'SNRPerTone',
                                'TxPhyRate'])

        class Stats(core.Exporter):
          """Represents Device_v2_0.Device.HomePlug.Interface.{i}.Stats."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['BroadcastPacketsReceived',
                                'BroadcastPacketsSent',
                                'BytesReceived',
                                'BytesSent',
                                'DiscardPacketsReceived',
                                'DiscardPacketsSent',
                                'ErrorsReceived',
                                'ErrorsSent',
                                'MPDURxAck',
                                'MPDURxFailed',
                                'MPDUTxAck',
                                'MPDUTxCol',
                                'MPDUTxFailed',
                                'MulticastPacketsReceived',
                                'MulticastPacketsSent',
                                'PacketsReceived',
                                'PacketsSent',
                                'UnicastPacketsReceived',
                                'UnicastPacketsSent',
                                'UnknownProtoPacketsReceived'])

    class Hosts(core.Exporter):
      """Represents Device_v2_0.Device.Hosts."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['HostNumberOfEntries'],
                    lists=['Host'])

      class Host(core.Exporter):
        """Represents Device_v2_0.Device.Hosts.Host.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Active',
                              'AddressSource',
                              'Alias',
                              'ClientID',
                              'HostName',
                              'IPAddress',
                              'Layer1Interface',
                              'Layer3Interface',
                              'LeaseTimeRemaining',
                              'PhysAddress',
                              'UserClassID',
                              'VendorClassID'])

    class IEEE8021x(core.Exporter):
      """Represents Device_v2_0.Device.IEEE8021x."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['SupplicantNumberOfEntries'],
                    lists=['Supplicant'])

      class Supplicant(core.Exporter):
        """Represents Device_v2_0.Device.IEEE8021x.Supplicant.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'AuthPeriod',
                              'AuthenticationCapabilities',
                              'AuthenticationSuccessPolicy',
                              'Disconnect',
                              'EAPIdentity',
                              'Enable',
                              'HeldPeriod',
                              'Interface',
                              'MaxStart',
                              'PAEState',
                              'Reset',
                              'StartFailurePolicy',
                              'StartPeriod',
                              'Status'],
                      objects=['EAPMD5',
                               'EAPTLS',
                               'Stats'])

        class EAPMD5(core.Exporter):
          """Represents Device_v2_0.Device.IEEE8021x.Supplicant.{i}.EAPMD5."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Enable',
                                'SharedSecret'])

        class EAPTLS(core.Exporter):
          """Represents Device_v2_0.Device.IEEE8021x.Supplicant.{i}.EAPTLS."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Enable',
                                'MutualAuthenticationEnable'])

        class Stats(core.Exporter):
          """Represents Device_v2_0.Device.IEEE8021x.Supplicant.{i}.Stats."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['LastFrameSourceMACAddress',
                                'LastFrameVersion',
                                'ReceivedFrames',
                                'ReceivedInvalidFrames',
                                'ReceivedLengthErrorFrames',
                                'ReceivedRequestFrames',
                                'ReceivedRequestIdFrames',
                                'TransmittedFrames',
                                'TransmittedLogoffFrames',
                                'TransmittedResponseFrames',
                                'TransmittedResponseIdFrames',
                                'TransmittedStartFrames'])

    class IP(core.Exporter):
      """Represents Device_v2_0.Device.IP."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['ActivePortNumberOfEntries',
                            'IPv4Capable',
                            'InterfaceNumberOfEntries'],
                    objects=['Diagnostics'],
                    lists=['ActivePort',
                           'Interface'])

      class ActivePort(core.Exporter):
        """Represents Device_v2_0.Device.IP.ActivePort.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['LocalIPAddress',
                              'LocalPort',
                              'RemoteIPAddress',
                              'RemotePort',
                              'Status'])

      class Diagnostics(core.Exporter):
        """Represents Device_v2_0.Device.IP.Diagnostics."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(objects=['IPPing',
                               'TraceRoute'])

        class IPPing(core.Exporter):
          """Represents Device_v2_0.Device.IP.Diagnostics.IPPing."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['AverageResponseTime',
                                'DSCP',
                                'DataBlockSize',
                                'DiagnosticsState',
                                'FailureCount',
                                'Host',
                                'Interface',
                                'MaximumResponseTime',
                                'MinimumResponseTime',
                                'NumberOfRepetitions',
                                'SuccessCount',
                                'Timeout'])

        class TraceRoute(core.Exporter):
          """Represents Device_v2_0.Device.IP.Diagnostics.TraceRoute."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['DSCP',
                                'DataBlockSize',
                                'DiagnosticsState',
                                'Host',
                                'Interface',
                                'MaxHopCount',
                                'NumberOfTries',
                                'ResponseTime',
                                'RouteHopsNumberOfEntries',
                                'Timeout'],
                        lists=['RouteHops'])

          class RouteHops(core.Exporter):
            """Represents Device_v2_0.Device.IP.Diagnostics.TraceRoute.RouteHops.{i}."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['ErrorCode',
                                  'Host',
                                  'HostAddress',
                                  'RTTimes'])

      class Interface(core.Exporter):
        """Represents Device_v2_0.Device.IP.Interface.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'AutoIPEnable',
                              'Enable',
                              'IPv4AddressNumberOfEntries',
                              'LastChange',
                              'Loopback',
                              'LowerLayers',
                              'MaxMTUSize',
                              'Name',
                              'Reset',
                              'Router',
                              'Status',
                              'Type'],
                      objects=['Stats'],
                      lists=['IPv4Address'])

        class IPv4Address(core.Exporter):
          """Represents Device_v2_0.Device.IP.Interface.{i}.IPv4Address.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['AddressingType',
                                'Alias',
                                'Enable',
                                'IPAddress',
                                'SubnetMask'])

        class Stats(core.Exporter):
          """Represents Device_v2_0.Device.IP.Interface.{i}.Stats."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['BroadcastPacketsReceived',
                                'BroadcastPacketsSent',
                                'BytesReceived',
                                'BytesSent',
                                'DiscardPacketsReceived',
                                'DiscardPacketsSent',
                                'ErrorsReceived',
                                'ErrorsSent',
                                'MulticastPacketsReceived',
                                'MulticastPacketsSent',
                                'PacketsReceived',
                                'PacketsSent',
                                'UnicastPacketsReceived',
                                'UnicastPacketsSent',
                                'UnknownProtoPacketsReceived'])

    class InterfaceStack(core.Exporter):
      """Represents Device_v2_0.Device.InterfaceStack.{i}."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['HigherAlias',
                            'HigherLayer',
                            'LowerAlias',
                            'LowerLayer'])

    class LANConfigSecurity(core.Exporter):
      """Represents Device_v2_0.Device.LANConfigSecurity."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['ConfigPassword'])

    class ManagementServer(core.Exporter):
      """Represents Device_v2_0.Device.ManagementServer."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['CWMPRetryIntervalMultiplier',
                            'CWMPRetryMinimumWaitInterval',
                            'ConnectionRequestPassword',
                            'ConnectionRequestURL',
                            'ConnectionRequestUsername',
                            'DefaultActiveNotificationThrottle',
                            'DownloadProgressURL',
                            'EnableCWMP',
                            'KickURL',
                            'ManageableDeviceNumberOfEntries',
                            'NATDetected',
                            'ParameterKey',
                            'Password',
                            'PeriodicInformEnable',
                            'PeriodicInformInterval',
                            'PeriodicInformTime',
                            'STUNEnable',
                            'STUNMaximumKeepAlivePeriod',
                            'STUNMinimumKeepAlivePeriod',
                            'STUNPassword',
                            'STUNServerAddress',
                            'STUNServerPort',
                            'STUNUsername',
                            'UDPConnectionRequestAddress',
                            'URL',
                            'UpgradesManaged',
                            'Username'],
                    lists=['ManageableDevice'])

      class ManageableDevice(core.Exporter):
        """Represents Device_v2_0.Device.ManagementServer.ManageableDevice.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'Host',
                              'ManufacturerOUI',
                              'ProductClass',
                              'SerialNumber'])

    class MoCA(core.Exporter):
      """Represents Device_v2_0.Device.MoCA."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['InterfaceNumberOfEntries'],
                    lists=['Interface'])

      class Interface(core.Exporter):
        """Represents Device_v2_0.Device.MoCA.Interface.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'AssociatedDeviceNumberOfEntries',
                              'BackupNC',
                              'BeaconPowerLimit',
                              'CurrentOperFreq',
                              'CurrentVersion',
                              'Enable',
                              'FirmwareVersion',
                              'FreqCapabilityMask',
                              'FreqCurrentMask',
                              'FreqCurrentMaskSetting',
                              'HighestVersion',
                              'KeyPassphrase',
                              'LastChange',
                              'LastOperFreq',
                              'LowerLayers',
                              'MACAddress',
                              'MaxBitRate',
                              'MaxEgressBW',
                              'MaxIngressBW',
                              'MaxNodes',
                              'Name',
                              'NetworkCoordinator',
                              'NetworkTabooMask',
                              'NodeID',
                              'NodeTabooMask',
                              'PacketAggregationCapability',
                              'PowerCntlPhyTarget',
                              'PreferredNC',
                              'PrivacyEnabled',
                              'PrivacyEnabledSetting',
                              'QAM256Capable',
                              'Status',
                              'TxBcastPowerReduction',
                              'TxBcastRate',
                              'TxPowerLimit',
                              'Upstream'],
                      objects=['QoS',
                               'Stats'],
                      lists=['AssociatedDevice'])

        class AssociatedDevice(core.Exporter):
          """Represents Device_v2_0.Device.MoCA.Interface.{i}.AssociatedDevice.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Active',
                                'HighestVersion',
                                'MACAddress',
                                'NodeID',
                                'PHYRxRate',
                                'PHYTxRate',
                                'PacketAggregationCapability',
                                'PreferredNC',
                                'QAM256Capable',
                                'RxBcastPowerLevel',
                                'RxErroredAndMissedPackets',
                                'RxPackets',
                                'RxPowerLevel',
                                'RxSNR',
                                'TxBcastRate',
                                'TxPackets',
                                'TxPowerControlReduction'])

        class QoS(core.Exporter):
          """Represents Device_v2_0.Device.MoCA.Interface.{i}.QoS."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['EgressNumFlows',
                                'FlowStatsNumberOfEntries',
                                'IngressNumFlows'],
                        lists=['FlowStats'])

          class FlowStats(core.Exporter):
            """Represents Device_v2_0.Device.MoCA.Interface.{i}.QoS.FlowStats.{i}."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['FlowID',
                                  'FlowPackets',
                                  'LeaseTime',
                                  'LeaseTimeLeft',
                                  'MaxBurstSize',
                                  'MaxRate',
                                  'PacketDA'])

        class Stats(core.Exporter):
          """Represents Device_v2_0.Device.MoCA.Interface.{i}.Stats."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['BroadcastPacketsReceived',
                                'BroadcastPacketsSent',
                                'BytesReceived',
                                'BytesSent',
                                'DiscardPacketsReceived',
                                'DiscardPacketsSent',
                                'ErrorsReceived',
                                'ErrorsSent',
                                'MulticastPacketsReceived',
                                'MulticastPacketsSent',
                                'PacketsReceived',
                                'PacketsSent',
                                'UnicastPacketsReceived',
                                'UnicastPacketsSent',
                                'UnknownProtoPacketsReceived'])

    class NAT(core.Exporter):
      """Represents Device_v2_0.Device.NAT."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['InterfaceSettingNumberOfEntries',
                            'PortMappingNumberOfEntries'],
                    lists=['InterfaceSetting',
                           'PortMapping'])

      class InterfaceSetting(core.Exporter):
        """Represents Device_v2_0.Device.NAT.InterfaceSetting.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'Enable',
                              'Interface',
                              'Status'])

      class PortMapping(core.Exporter):
        """Represents Device_v2_0.Device.NAT.PortMapping.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'AllInterfaces',
                              'Description',
                              'Enable',
                              'ExternalPort',
                              'ExternalPortEndRange',
                              'Interface',
                              'InternalClient',
                              'InternalPort',
                              'LeaseDuration',
                              'Protocol',
                              'RemoteHost',
                              'Status'])

    class PPP(core.Exporter):
      """Represents Device_v2_0.Device.PPP."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['InterfaceNumberOfEntries'],
                    lists=['Interface'])

      class Interface(core.Exporter):
        """Represents Device_v2_0.Device.PPP.Interface.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'AuthenticationProtocol',
                              'AutoDisconnectTime',
                              'CompressionProtocol',
                              'ConnectionStatus',
                              'ConnectionTrigger',
                              'CurrentMRUSize',
                              'Enable',
                              'EncryptionProtocol',
                              'IdleDisconnectTime',
                              'LCPEcho',
                              'LCPEchoRetry',
                              'LastChange',
                              'LastConnectionError',
                              'LowerLayers',
                              'MaxMRUSize',
                              'Name',
                              'Password',
                              'Reset',
                              'Status',
                              'Username',
                              'WarnDisconnectDelay'],
                      objects=['IPCP',
                               'PPPoE',
                               'Stats'])

        class IPCP(core.Exporter):
          """Represents Device_v2_0.Device.PPP.Interface.{i}.IPCP."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['DNSServers',
                                'LocalIPAddress',
                                'PassthroughDHCPPool',
                                'PassthroughEnable',
                                'RemoteIPAddress'])

        class PPPoE(core.Exporter):
          """Represents Device_v2_0.Device.PPP.Interface.{i}.PPPoE."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['ACName',
                                'ServiceName',
                                'SessionID'])

        class Stats(core.Exporter):
          """Represents Device_v2_0.Device.PPP.Interface.{i}.Stats."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['BroadcastPacketsReceived',
                                'BroadcastPacketsSent',
                                'BytesReceived',
                                'BytesSent',
                                'DiscardPacketsReceived',
                                'DiscardPacketsSent',
                                'ErrorsReceived',
                                'ErrorsSent',
                                'MulticastPacketsReceived',
                                'MulticastPacketsSent',
                                'PacketsReceived',
                                'PacketsSent',
                                'UnicastPacketsReceived',
                                'UnicastPacketsSent',
                                'UnknownProtoPacketsReceived'])

    class PTM(core.Exporter):
      """Represents Device_v2_0.Device.PTM."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['LinkNumberOfEntries'],
                    lists=['Link'])

      class Link(core.Exporter):
        """Represents Device_v2_0.Device.PTM.Link.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'Enable',
                              'LastChange',
                              'LowerLayers',
                              'MACAddress',
                              'Name',
                              'Status'],
                      objects=['Stats'])

        class Stats(core.Exporter):
          """Represents Device_v2_0.Device.PTM.Link.{i}.Stats."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['BroadcastPacketsReceived',
                                'BroadcastPacketsSent',
                                'BytesReceived',
                                'BytesSent',
                                'DiscardPacketsReceived',
                                'DiscardPacketsSent',
                                'ErrorsReceived',
                                'ErrorsSent',
                                'MulticastPacketsReceived',
                                'MulticastPacketsSent',
                                'PacketsReceived',
                                'PacketsSent',
                                'UnicastPacketsReceived',
                                'UnicastPacketsSent',
                                'UnknownProtoPacketsReceived'])

    class QoS(core.Exporter):
      """Represents Device_v2_0.Device.QoS."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['AppNumberOfEntries',
                            'AvailableAppList',
                            'ClassificationNumberOfEntries',
                            'DefaultDSCPMark',
                            'DefaultEthernetPriorityMark',
                            'DefaultForwardingPolicy',
                            'DefaultPolicer',
                            'DefaultQueue',
                            'DefaultTrafficClass',
                            'FlowNumberOfEntries',
                            'MaxAppEntries',
                            'MaxClassificationEntries',
                            'MaxFlowEntries',
                            'MaxPolicerEntries',
                            'MaxQueueEntries',
                            'MaxShaperEntries',
                            'PolicerNumberOfEntries',
                            'QueueNumberOfEntries',
                            'QueueStatsNumberOfEntries',
                            'ShaperNumberOfEntries'],
                    lists=['App',
                           'Classification',
                           'Flow',
                           'Policer',
                           'Queue',
                           'QueueStats',
                           'Shaper'])

      class App(core.Exporter):
        """Represents Device_v2_0.Device.QoS.App.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'DefaultDSCPMark',
                              'DefaultEthernetPriorityMark',
                              'DefaultForwardingPolicy',
                              'DefaultPolicer',
                              'DefaultTrafficClass',
                              'Enable',
                              'Name',
                              'ProtocolIdentifier',
                              'Status'])

      class Classification(core.Exporter):
        """Represents Device_v2_0.Device.QoS.Classification.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'AllInterfaces',
                              'App',
                              'DSAP',
                              'DSAPExclude',
                              'DSCPCheck',
                              'DSCPExclude',
                              'DSCPMark',
                              'DestClientID',
                              'DestClientIDExclude',
                              'DestIP',
                              'DestIPExclude',
                              'DestMACAddress',
                              'DestMACExclude',
                              'DestMACMask',
                              'DestMask',
                              'DestPort',
                              'DestPortExclude',
                              'DestPortRangeMax',
                              'DestUserClassID',
                              'DestUserClassIDExclude',
                              'DestVendorClassID',
                              'DestVendorClassIDExclude',
                              'DestVendorClassIDMode',
                              'DestVendorSpecificInfo',
                              'DestVendorSpecificInfoEnterprise',
                              'DestVendorSpecificInfoExclude',
                              'DestVendorSpecificInfoSubOption',
                              'Enable',
                              'EthernetPriorityCheck',
                              'EthernetPriorityExclude',
                              'EthernetPriorityMark',
                              'Ethertype',
                              'EthertypeExclude',
                              'ForwardingPolicy',
                              'IPLengthExclude',
                              'IPLengthMax',
                              'IPLengthMin',
                              'Interface',
                              'LLCControl',
                              'LLCControlExclude',
                              'Order',
                              'OutOfBandInfo',
                              'Policer',
                              'Protocol',
                              'ProtocolExclude',
                              'SNAPOUI',
                              'SNAPOUIExclude',
                              'SSAP',
                              'SSAPExclude',
                              'SourceClientID',
                              'SourceClientIDExclude',
                              'SourceIP',
                              'SourceIPExclude',
                              'SourceMACAddress',
                              'SourceMACExclude',
                              'SourceMACMask',
                              'SourceMask',
                              'SourcePort',
                              'SourcePortExclude',
                              'SourcePortRangeMax',
                              'SourceUserClassID',
                              'SourceUserClassIDExclude',
                              'SourceVendorClassID',
                              'SourceVendorClassIDExclude',
                              'SourceVendorClassIDMode',
                              'SourceVendorSpecificInfo',
                              'SourceVendorSpecificInfoEnterprise',
                              'SourceVendorSpecificInfoExclude',
                              'SourceVendorSpecificInfoSubOption',
                              'Status',
                              'TCPACK',
                              'TCPACKExclude',
                              'TrafficClass',
                              'VLANIDCheck',
                              'VLANIDExclude'])

      class Flow(core.Exporter):
        """Represents Device_v2_0.Device.QoS.Flow.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'App',
                              'DSCPMark',
                              'Enable',
                              'EthernetPriorityMark',
                              'ForwardingPolicy',
                              'Name',
                              'Policer',
                              'Status',
                              'TrafficClass',
                              'Type',
                              'TypeParameters'])

      class Policer(core.Exporter):
        """Represents Device_v2_0.Device.QoS.Policer.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'CommittedBurstSize',
                              'CommittedRate',
                              'ConformingAction',
                              'ConformingCountedBytes',
                              'ConformingCountedPackets',
                              'Enable',
                              'ExcessBurstSize',
                              'MeterType',
                              'NonConformingAction',
                              'NonConformingCountedBytes',
                              'NonConformingCountedPackets',
                              'PartialConformingAction',
                              'PartiallyConformingCountedBytes',
                              'PartiallyConformingCountedPackets',
                              'PeakBurstSize',
                              'PeakRate',
                              'PossibleMeterTypes',
                              'Status',
                              'TotalCountedBytes',
                              'TotalCountedPackets'])

      class Queue(core.Exporter):
        """Represents Device_v2_0.Device.QoS.Queue.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'AllInterfaces',
                              'BufferLength',
                              'DropAlgorithm',
                              'Enable',
                              'HardwareAssisted',
                              'Interface',
                              'Precedence',
                              'REDPercentage',
                              'REDThreshold',
                              'SchedulerAlgorithm',
                              'ShapingBurstSize',
                              'ShapingRate',
                              'Status',
                              'TrafficClasses',
                              'Weight'])

      class QueueStats(core.Exporter):
        """Represents Device_v2_0.Device.QoS.QueueStats.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'DroppedBytes',
                              'DroppedPackets',
                              'Enable',
                              'Interface',
                              'OutputBytes',
                              'OutputPackets',
                              'Queue',
                              'QueueOccupancyPackets',
                              'QueueOccupancyPercentage',
                              'Status'])

      class Shaper(core.Exporter):
        """Represents Device_v2_0.Device.QoS.Shaper.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'Enable',
                              'Interface',
                              'ShapingBurstSize',
                              'ShapingRate',
                              'Status'])

    class Routing(core.Exporter):
      """Represents Device_v2_0.Device.Routing."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['RouterNumberOfEntries'],
                    objects=['RIP'],
                    lists=['Router'])

      class RIP(core.Exporter):
        """Represents Device_v2_0.Device.Routing.RIP."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Enable',
                              'InterfaceSettingNumberOfEntries',
                              'SupportedModes'],
                      lists=['InterfaceSetting'])

        class InterfaceSetting(core.Exporter):
          """Represents Device_v2_0.Device.Routing.RIP.InterfaceSetting.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['AcceptRA',
                                'Alias',
                                'Enable',
                                'Interface',
                                'SendRA',
                                'Status',
                                'Version'])

      class Router(core.Exporter):
        """Represents Device_v2_0.Device.Routing.Router.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'Enable',
                              'IPv4ForwardingNumberOfEntries',
                              'Status'],
                      lists=['IPv4Forwarding'])

        class IPv4Forwarding(core.Exporter):
          """Represents Device_v2_0.Device.Routing.Router.{i}.IPv4Forwarding.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Alias',
                                'DestIPAddress',
                                'DestSubnetMask',
                                'Enable',
                                'ForwardingMetric',
                                'ForwardingPolicy',
                                'GatewayIPAddress',
                                'Interface',
                                'StaticRoute',
                                'Status'])

    class Services(core.Exporter):
      """Represents Device_v2_0.Device.Services."""
      pass

    class SmartCardReaders(core.Exporter):
      """Represents Device_v2_0.Device.SmartCardReaders."""
      pass

    class UPA(core.Exporter):
      """Represents Device_v2_0.Device.UPA."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['InterfaceNumberOfEntries'],
                    objects=['Diagnostics'],
                    lists=['Interface'])

      class Diagnostics(core.Exporter):
        """Represents Device_v2_0.Device.UPA.Diagnostics."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(objects=['InterfaceMeasurement'])

        class InterfaceMeasurement(core.Exporter):
          """Represents Device_v2_0.Device.UPA.Diagnostics.InterfaceMeasurement."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['DiagnosticsState',
                                'Interface',
                                'Measurements',
                                'Port',
                                'RxGain',
                                'Type'])

      class Interface(core.Exporter):
        """Represents Device_v2_0.Device.UPA.Interface.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['ActiveNotchEnable',
                              'ActiveNotchNumberOfEntries',
                              'Alias',
                              'AssociatedDeviceNumberOfEntries',
                              'BridgeForNumberOfEntries',
                              'Enable',
                              'EncryptionKey',
                              'EncryptionMethod',
                              'EstApplicationThroughput',
                              'FirmwareVersion',
                              'LastChange',
                              'LogicalNetwork',
                              'LowerLayers',
                              'MACAddress',
                              'MaxBitRate',
                              'Name',
                              'NodeType',
                              'PowerBackoffEnabled',
                              'PowerBackoffMechanismActive',
                              'Status',
                              'Upstream'],
                      objects=['Stats'],
                      lists=['ActiveNotch',
                             'AssociatedDevice',
                             'BridgeFor'])

        class ActiveNotch(core.Exporter):
          """Represents Device_v2_0.Device.UPA.Interface.{i}.ActiveNotch.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Alias',
                                'Depth',
                                'Enable',
                                'StartFreq',
                                'StopFreq'])

        class AssociatedDevice(core.Exporter):
          """Represents Device_v2_0.Device.UPA.Interface.{i}.AssociatedDevice.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Active',
                                'DirectRoute',
                                'EstimatedPLR',
                                'LogicalNetwork',
                                'MACAddress',
                                'MeanEstimatedAtt',
                                'PhyRxThroughput',
                                'PhyTxThroughput',
                                'Port',
                                'RealPhyRxThroughput',
                                'SmartRouteIntermediatePLCMAC'])

        class BridgeFor(core.Exporter):
          """Represents Device_v2_0.Device.UPA.Interface.{i}.BridgeFor.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Alias',
                                'MACAddress',
                                'Port'])

        class Stats(core.Exporter):
          """Represents Device_v2_0.Device.UPA.Interface.{i}.Stats."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['BroadcastPacketsReceived',
                                'BroadcastPacketsSent',
                                'BytesReceived',
                                'BytesSent',
                                'DiscardPacketsReceived',
                                'DiscardPacketsSent',
                                'ErrorsReceived',
                                'ErrorsSent',
                                'MulticastPacketsReceived',
                                'MulticastPacketsSent',
                                'PacketsReceived',
                                'PacketsSent',
                                'UnicastPacketsReceived',
                                'UnicastPacketsSent',
                                'UnknownProtoPacketsReceived'])

    class USB(core.Exporter):
      """Represents Device_v2_0.Device.USB."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['InterfaceNumberOfEntries',
                            'PortNumberOfEntries'],
                    lists=['Interface',
                           'Port'])

      class Interface(core.Exporter):
        """Represents Device_v2_0.Device.USB.Interface.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'Enable',
                              'LastChange',
                              'LowerLayers',
                              'MACAddress',
                              'MaxBitRate',
                              'Name',
                              'Port',
                              'Status',
                              'Upstream'],
                      objects=['Stats'])

        class Stats(core.Exporter):
          """Represents Device_v2_0.Device.USB.Interface.{i}.Stats."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['BroadcastPacketsReceived',
                                'BroadcastPacketsSent',
                                'BytesReceived',
                                'BytesSent',
                                'DiscardPacketsReceived',
                                'DiscardPacketsSent',
                                'ErrorsReceived',
                                'ErrorsSent',
                                'MulticastPacketsReceived',
                                'MulticastPacketsSent',
                                'PacketsReceived',
                                'PacketsSent',
                                'UnicastPacketsReceived',
                                'UnicastPacketsSent',
                                'UnknownProtoPacketsReceived'])

      class Port(core.Exporter):
        """Represents Device_v2_0.Device.USB.Port.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'Name',
                              'Power',
                              'Rate',
                              'Receptacle',
                              'Standard',
                              'Type'])

    class Users(core.Exporter):
      """Represents Device_v2_0.Device.Users."""
      pass

    class WiFi(core.Exporter):
      """Represents Device_v2_0.Device.WiFi."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['AccessPointNumberOfEntries',
                            'EndPointNumberOfEntries',
                            'RadioNumberOfEntries',
                            'SSIDNumberOfEntries'],
                    lists=['AccessPoint',
                           'EndPoint',
                           'Radio',
                           'SSID'])

      class AccessPoint(core.Exporter):
        """Represents Device_v2_0.Device.WiFi.AccessPoint.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'AssociatedDeviceNumberOfEntries',
                              'Enable',
                              'RetryLimit',
                              'SSIDAdvertisementEnabled',
                              'SSIDReference',
                              'Status',
                              'UAPSDCapability',
                              'UAPSDEnable',
                              'WMMCapability',
                              'WMMEnable'],
                      objects=['Security',
                               'WPS'],
                      lists=['AssociatedDevice'])

        class AssociatedDevice(core.Exporter):
          """Represents Device_v2_0.Device.WiFi.AccessPoint.{i}.AssociatedDevice.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Active',
                                'AuthenticationState',
                                'LastDataDownlinkRate',
                                'LastDataUplinkRate',
                                'MACAddress',
                                'Retransmissions',
                                'SignalStrength'])

        class Security(core.Exporter):
          """Represents Device_v2_0.Device.WiFi.AccessPoint.{i}.Security."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['KeyPassphrase',
                                'ModeEnabled',
                                'ModesSupported',
                                'PreSharedKey',
                                'RadiusSecret',
                                'RadiusServerIPAddr',
                                'RadiusServerPort',
                                'RekeyingInterval',
                                'WEPKey'])

        class WPS(core.Exporter):
          """Represents Device_v2_0.Device.WiFi.AccessPoint.{i}.WPS."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['ConfigMethodsEnabled',
                                'ConfigMethodsSupported',
                                'Enable'])

      class EndPoint(core.Exporter):
        """Represents Device_v2_0.Device.WiFi.EndPoint.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'Enable',
                              'ProfileNumberOfEntries',
                              'ProfileReference',
                              'SSIDReference',
                              'Status'],
                      objects=['Security',
                               'Stats',
                               'WPS'],
                      lists=['Profile'])

        class Profile(core.Exporter):
          """Represents Device_v2_0.Device.WiFi.EndPoint.{i}.Profile.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Alias',
                                'Enable',
                                'Location',
                                'Priority',
                                'SSID',
                                'Status'],
                        objects=['Security'])

          class Security(core.Exporter):
            """Represents Device_v2_0.Device.WiFi.EndPoint.{i}.Profile.{i}.Security."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['KeyPassphrase',
                                  'ModeEnabled',
                                  'PreSharedKey',
                                  'WEPKey'])

        class Security(core.Exporter):
          """Represents Device_v2_0.Device.WiFi.EndPoint.{i}.Security."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['ModesSupported'])

        class Stats(core.Exporter):
          """Represents Device_v2_0.Device.WiFi.EndPoint.{i}.Stats."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['LastDataDownlinkRate',
                                'LastDataUplinkRate',
                                'Retransmissions',
                                'SignalStrength'])

        class WPS(core.Exporter):
          """Represents Device_v2_0.Device.WiFi.EndPoint.{i}.WPS."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['ConfigMethodsEnabled',
                                'ConfigMethodsSupported',
                                'Enable'])

      class Radio(core.Exporter):
        """Represents Device_v2_0.Device.WiFi.Radio.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'AutoChannelEnable',
                              'AutoChannelRefreshPeriod',
                              'AutoChannelSupported',
                              'Channel',
                              'ChannelsInUse',
                              'Enable',
                              'ExtensionChannel',
                              'GuardInterval',
                              'IEEE80211hEnabled',
                              'IEEE80211hSupported',
                              'LastChange',
                              'LowerLayers',
                              'MCS',
                              'MaxBitRate',
                              'Name',
                              'OperatingChannelBandwidth',
                              'OperatingFrequencyBand',
                              'OperatingStandards',
                              'PossibleChannels',
                              'RegulatoryDomain',
                              'Status',
                              'SupportedFrequencyBands',
                              'SupportedStandards',
                              'TransmitPower',
                              'TransmitPowerSupported',
                              'Upstream'],
                      objects=['Stats'])

        class Stats(core.Exporter):
          """Represents Device_v2_0.Device.WiFi.Radio.{i}.Stats."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['BytesReceived',
                                'BytesSent',
                                'DiscardPacketsReceived',
                                'DiscardPacketsSent',
                                'ErrorsReceived',
                                'ErrorsSent',
                                'PacketsReceived',
                                'PacketsSent'])

      class SSID(core.Exporter):
        """Represents Device_v2_0.Device.WiFi.SSID.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'BSSID',
                              'Enable',
                              'LastChange',
                              'LowerLayers',
                              'MACAddress',
                              'Name',
                              'SSID',
                              'Status'],
                      objects=['Stats'])

        class Stats(core.Exporter):
          """Represents Device_v2_0.Device.WiFi.SSID.{i}.Stats."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['BroadcastPacketsReceived',
                                'BroadcastPacketsSent',
                                'BytesReceived',
                                'BytesSent',
                                'DiscardPacketsReceived',
                                'DiscardPacketsSent',
                                'ErrorsReceived',
                                'ErrorsSent',
                                'MulticastPacketsReceived',
                                'MulticastPacketsSent',
                                'PacketsReceived',
                                'PacketsSent',
                                'UnicastPacketsReceived',
                                'UnicastPacketsSent',
                                'UnknownProtoPacketsReceived'])

  class DeviceInfo(core.Exporter):
    """Represents Device_v2_0.DeviceInfo."""

    def __init__(self, **defaults):
      core.Exporter.__init__(self, defaults=defaults)
      self.Export(params=['AdditionalHardwareVersion',
                          'AdditionalSoftwareVersion',
                          'Description',
                          'FirstUseDate',
                          'HardwareVersion',
                          'Manufacturer',
                          'ManufacturerOUI',
                          'ModelName',
                          'ProductClass',
                          'ProvisioningCode',
                          'SerialNumber',
                          'SoftwareVersion',
                          'SupportedDataModelNumberOfEntries',
                          'UpTime',
                          'VendorConfigFileNumberOfEntries'],
                  objects=['MemoryStatus',
                           'NetworkProperties',
                           'ProcessStatus',
                           'TemperatureStatus'],
                  lists=['SupportedDataModel',
                         'VendorConfigFile'])

    class MemoryStatus(core.Exporter):
      """Represents Device_v2_0.DeviceInfo.MemoryStatus."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['Free',
                            'Total'])

    class NetworkProperties(core.Exporter):
      """Represents Device_v2_0.DeviceInfo.NetworkProperties."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['MaxTCPWindowSize',
                            'TCPImplementation'])

    class ProcessStatus(core.Exporter):
      """Represents Device_v2_0.DeviceInfo.ProcessStatus."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['CPUUsage',
                            'ProcessNumberOfEntries'],
                    lists=['Process'])

      class Process(core.Exporter):
        """Represents Device_v2_0.DeviceInfo.ProcessStatus.Process.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['CPUTime',
                              'Command',
                              'PID',
                              'Priority',
                              'Size',
                              'State'])

    class SupportedDataModel(core.Exporter):
      """Represents Device_v2_0.DeviceInfo.SupportedDataModel.{i}."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['Features',
                            'URL',
                            'URN'])

    class TemperatureStatus(core.Exporter):
      """Represents Device_v2_0.DeviceInfo.TemperatureStatus."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['TemperatureSensorNumberOfEntries'],
                    lists=['TemperatureSensor'])

      class TemperatureSensor(core.Exporter):
        """Represents Device_v2_0.DeviceInfo.TemperatureStatus.TemperatureSensor.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Enable',
                              'HighAlarmTime',
                              'HighAlarmValue',
                              'LastUpdate',
                              'LowAlarmTime',
                              'LowAlarmValue',
                              'MaxTime',
                              'MaxValue',
                              'MinTime',
                              'MinValue',
                              'Name',
                              'Reset',
                              'ResetTime',
                              'Status',
                              'Value'])

    class VendorConfigFile(core.Exporter):
      """Represents Device_v2_0.DeviceInfo.VendorConfigFile.{i}."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['Alias',
                            'Date',
                            'Description',
                            'Name',
                            'Version'])

  class DownloadAvailability(core.Exporter):
    """Represents Device_v2_0.DownloadAvailability."""

    def __init__(self, **defaults):
      core.Exporter.__init__(self, defaults=defaults)
      self.Export(objects=['Announcement',
                           'Query'])

    class Announcement(core.Exporter):
      """Represents Device_v2_0.DownloadAvailability.Announcement."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['Enable',
                            'GroupNumberOfEntries',
                            'Status'],
                    lists=['Group'])

      class Group(core.Exporter):
        """Represents Device_v2_0.DownloadAvailability.Announcement.Group.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Enable',
                              'Status',
                              'URL'])

    class Query(core.Exporter):
      """Represents Device_v2_0.DownloadAvailability.Query."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['Enable',
                            'Status',
                            'URL'])

  class DownloadDiagnostics(core.Exporter):
    """Represents Device_v2_0.DownloadDiagnostics."""

    def __init__(self, **defaults):
      core.Exporter.__init__(self, defaults=defaults)
      self.Export(params=['BOMTime',
                          'DSCP',
                          'DiagnosticsState',
                          'DownloadURL',
                          'EOMTime',
                          'EthernetPriority',
                          'Interface',
                          'ROMTime',
                          'TCPOpenRequestTime',
                          'TCPOpenResponseTime',
                          'TestBytesReceived',
                          'TotalBytesReceived'])

  class Firewall(core.Exporter):
    """Represents Device_v2_0.Firewall."""

    def __init__(self, **defaults):
      core.Exporter.__init__(self, defaults=defaults)
      self.Export(params=['Config',
                          'LastChange',
                          'Version'])

  class ManagementServer(core.Exporter):
    """Represents Device_v2_0.ManagementServer."""

    def __init__(self, **defaults):
      core.Exporter.__init__(self, defaults=defaults)
      self.Export(objects=['AutonomousTransferCompletePolicy'])

    class AutonomousTransferCompletePolicy(core.Exporter):
      """Represents Device_v2_0.ManagementServer.AutonomousTransferCompletePolicy."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['Enable',
                            'FileTypeFilter',
                            'ResultTypeFilter',
                            'TransferTypeFilter'])

  class NSLookupDiagnostics(core.Exporter):
    """Represents Device_v2_0.NSLookupDiagnostics."""

    def __init__(self, **defaults):
      core.Exporter.__init__(self, defaults=defaults)
      self.Export(params=['DNSServer',
                          'DiagnosticsState',
                          'HostName',
                          'Interface',
                          'NumberOfRepetitions',
                          'ResultNumberOfEntries',
                          'SuccessCount',
                          'Timeout'],
                  lists=['Result'])

    class Result(core.Exporter):
      """Represents Device_v2_0.NSLookupDiagnostics.Result.{i}."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['AnswerType',
                            'DNSServerIP',
                            'HostNameReturned',
                            'IPAddresses',
                            'ResponseTime',
                            'Status'])

  class PeriodicStatistics(core.Exporter):
    """Represents Device_v2_0.PeriodicStatistics."""

    def __init__(self, **defaults):
      core.Exporter.__init__(self, defaults=defaults)
      self.Export(params=['MaxReportSamples',
                          'MinSampleInterval',
                          'SampleSetNumberOfEntries'],
                  lists=['SampleSet'])

    class SampleSet(core.Exporter):
      """Represents Device_v2_0.PeriodicStatistics.SampleSet.{i}."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['Enable',
                            'FetchSamples',
                            'ForceSample',
                            'Name',
                            'ParameterNumberOfEntries',
                            'ReportEndTime',
                            'ReportSamples',
                            'ReportStartTime',
                            'SampleInterval',
                            'SampleSeconds',
                            'Status',
                            'TimeReference'],
                    lists=['Parameter'])

      class Parameter(core.Exporter):
        """Represents Device_v2_0.PeriodicStatistics.SampleSet.{i}.Parameter.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['CalculationMode',
                              'Enable',
                              'Failures',
                              'HighThreshold',
                              'LowThreshold',
                              'Reference',
                              'SampleMode',
                              'SampleSeconds',
                              'SuspectData',
                              'Values'])

  class SelfTestDiagnostics(core.Exporter):
    """Represents Device_v2_0.SelfTestDiagnostics."""

    def __init__(self, **defaults):
      core.Exporter.__init__(self, defaults=defaults)
      self.Export(params=['DiagnosticsState',
                          'Results'])

  class SmartCardReader(core.Exporter):
    """Represents Device_v2_0.SmartCardReader.{i}."""

    def __init__(self, **defaults):
      core.Exporter.__init__(self, defaults=defaults)
      self.Export(params=['DecryptionFailedCounter',
                          'DecryptionFailedNoKeyCounter',
                          'Enable',
                          'Name',
                          'Reset',
                          'ResetTime',
                          'Status'],
                  objects=['SmartCard'])

    class SmartCard(core.Exporter):
      """Represents Device_v2_0.SmartCardReader.{i}.SmartCard."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['ATR',
                            'Application',
                            'SerialNumber',
                            'Status',
                            'Type'])

  class Time(core.Exporter):
    """Represents Device_v2_0.Time."""

    def __init__(self, **defaults):
      core.Exporter.__init__(self, defaults=defaults)
      self.Export(params=['CurrentLocalTime',
                          'Enable',
                          'LocalTimeZone',
                          'NTPServer1',
                          'NTPServer2',
                          'NTPServer3',
                          'NTPServer4',
                          'NTPServer5',
                          'Status'])

  class UDPEchoConfig(core.Exporter):
    """Represents Device_v2_0.UDPEchoConfig."""

    def __init__(self, **defaults):
      core.Exporter.__init__(self, defaults=defaults)
      self.Export(params=['BytesReceived',
                          'BytesResponded',
                          'EchoPlusEnabled',
                          'EchoPlusSupported',
                          'Enable',
                          'Interface',
                          'PacketsReceived',
                          'PacketsResponded',
                          'SourceIPAddress',
                          'TimeFirstPacketReceived',
                          'TimeLastPacketReceived',
                          'UDPPort'])

  class UPnP(core.Exporter):
    """Represents Device_v2_0.UPnP."""

    def __init__(self, **defaults):
      core.Exporter.__init__(self, defaults=defaults)
      self.Export(objects=['Device',
                           'Discovery'])

    class Device(core.Exporter):
      """Represents Device_v2_0.UPnP.Device."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['Enable',
                            'UPnPDMBasicMgmt',
                            'UPnPDMConfigurationMgmt',
                            'UPnPDMSoftwareMgmt',
                            'UPnPIGD',
                            'UPnPMediaRenderer',
                            'UPnPMediaServer',
                            'UPnPQoSDevice ',
                            'UPnPQoSPolicyHolder',
                            'UPnPWLANAccessPoint'],
                    objects=['Capabilities'])

      class Capabilities(core.Exporter):
        """Represents Device_v2_0.UPnP.Device.Capabilities."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['UPnPArchitecture',
                              'UPnPArchitectureMinorVer',
                              'UPnPBasicDevice',
                              'UPnPDMBasicMgmt',
                              'UPnPDMConfigurationMgmt',
                              'UPnPDMSoftwareMgmt',
                              'UPnPIGD',
                              'UPnPMediaRenderer',
                              'UPnPMediaServer',
                              'UPnPQoSDevice',
                              'UPnPQoSPolicyHolder',
                              'UPnPWLANAccessPoint'])

    class Discovery(core.Exporter):
      """Represents Device_v2_0.UPnP.Discovery."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['DeviceNumberOfEntries',
                            'RootDeviceNumberOfEntries',
                            'ServiceNumberOfEntries'],
                    lists=['Device',
                           'RootDevice',
                           'Service'])

      class Device(core.Exporter):
        """Represents Device_v2_0.UPnP.Discovery.Device.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Host',
                              'LeaseTime',
                              'Location',
                              'Server',
                              'Status',
                              'USN',
                              'UUID'])

      class RootDevice(core.Exporter):
        """Represents Device_v2_0.UPnP.Discovery.RootDevice.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Host',
                              'LeaseTime',
                              'Location',
                              'Server',
                              'Status',
                              'USN',
                              'UUID'])

      class Service(core.Exporter):
        """Represents Device_v2_0.UPnP.Discovery.Service.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Host',
                              'LeaseTime',
                              'Location',
                              'Server',
                              'Status',
                              'USN'])

  class USBHosts(core.Exporter):
    """Represents Device_v2_0.USBHosts."""

    def __init__(self, **defaults):
      core.Exporter.__init__(self, defaults=defaults)
      self.Export(params=['HostNumberOfEntries'],
                  lists=['Host'])

    class Host(core.Exporter):
      """Represents Device_v2_0.USBHosts.Host.{i}."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['DeviceNumberOfEntries',
                            'Enable',
                            'Name',
                            'PowerManagementEnable',
                            'Reset',
                            'Type',
                            'USBVersion'],
                    lists=['Device'])

      class Device(core.Exporter):
        """Represents Device_v2_0.USBHosts.Host.{i}.Device.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['ConfigurationNumberOfEntries',
                              'DeviceClass',
                              'DeviceNumber',
                              'DeviceProtocol',
                              'DeviceSubClass',
                              'DeviceVersion',
                              'IsSelfPowered',
                              'IsSuspended',
                              'Manufacturer',
                              'MaxChildren',
                              'Parent',
                              'Port',
                              'ProductClass',
                              'ProductID',
                              'Rate',
                              'SerialNumber',
                              'USBPort',
                              'USBVersion',
                              'VendorID'],
                      lists=['Configuration'])

        class Configuration(core.Exporter):
          """Represents Device_v2_0.USBHosts.Host.{i}.Device.{i}.Configuration.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['ConfigurationNumber',
                                'InterfaceNumberOfEntries'],
                        lists=['Interface'])

          class Interface(core.Exporter):
            """Represents Device_v2_0.USBHosts.Host.{i}.Device.{i}.Configuration.{i}.Interface.{i}."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['InterfaceClass',
                                  'InterfaceNumber',
                                  'InterfaceProtocol',
                                  'InterfaceSubClass'])

  class UploadDiagnostics(core.Exporter):
    """Represents Device_v2_0.UploadDiagnostics."""

    def __init__(self, **defaults):
      core.Exporter.__init__(self, defaults=defaults)
      self.Export(params=['BOMTime',
                          'DSCP',
                          'DiagnosticsState',
                          'EOMTime',
                          'EthernetPriority',
                          'Interface',
                          'ROMTime',
                          'TCPOpenRequestTime',
                          'TCPOpenResponseTime',
                          'TestFileLength',
                          'TotalBytesSent',
                          'UploadURL'])

  class User(core.Exporter):
    """Represents Device_v2_0.User.{i}."""

    def __init__(self, **defaults):
      core.Exporter.__init__(self, defaults=defaults)
      self.Export(params=['Enable',
                          'Language',
                          'Password',
                          'RemoteAccessCapable',
                          'Username'])

  class UserInterface(core.Exporter):
    """Represents Device_v2_0.UserInterface."""

    def __init__(self, **defaults):
      core.Exporter.__init__(self, defaults=defaults)
      self.Export(params=['AutoUpdateServer',
                          'AvailableLanguages',
                          'BackgroundColor',
                          'ButtonColor',
                          'ButtonTextColor',
                          'CurrentLanguage',
                          'ISPHelpDesk',
                          'ISPHelpPage',
                          'ISPHomePage',
                          'ISPLogo',
                          'ISPLogoSize',
                          'ISPMailServer',
                          'ISPName',
                          'ISPNewsServer',
                          'PasswordRequired',
                          'PasswordReset',
                          'PasswordUserSelectable',
                          'TextColor',
                          'UpgradeAvailable',
                          'UserUpdateServer',
                          'WarrantyDate'],
                  objects=['LocalDisplay',
                           'RemoteAccess'])

    class LocalDisplay(core.Exporter):
      """Represents Device_v2_0.UserInterface.LocalDisplay."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['DisplayHeight',
                            'DisplayWidth',
                            'Height',
                            'Movable',
                            'PosX',
                            'PosY',
                            'Resizable',
                            'Width'])

    class RemoteAccess(core.Exporter):
      """Represents Device_v2_0.UserInterface.RemoteAccess."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['Enable',
                            'Port',
                            'Protocol',
                            'SupportedProtocols'])


if __name__ == '__main__':
  print core.DumpSchema(Device_v2_0)
