#!/usr/bin/python
# Copyright 2011 Google Inc. All Rights Reserved.
#
# AUTO-GENERATED BY parse-schema.py
#
# DO NOT EDIT!!
#
#pylint: disable-msg=C6202
#pylint: disable-msg=C6409
#pylint: disable-msg=C6310
# These should not actually be necessary (bugs in gpylint?):
#pylint: disable-msg=E1101
#pylint: disable-msg=W0231
#
"""Auto-generated from spec: urn:broadband-forum-org:tr-181-2-2."""

import core
from tr181_v2_1 import Device_v2_1


class Device_v2_2(Device_v2_1):
  """Represents Device_v2_2."""

  def __init__(self, **defaults):
    Device_v2_1.__init__(self, defaults=defaults)
    self.Export(objects=['Device',
                         'UserInterface'])

  class Device(Device_v2_1.Device):
    """Represents Device_v2_2.Device."""

    def __init__(self, **defaults):
      Device_v2_1.Device.__init__(self, defaults=defaults)
      self.Export(objects=['Bridging',
                           'DHCPv4',
                           'DHCPv6',
                           'DNS',
                           'DSLite',
                           'Firewall',
                           'Hosts',
                           'IEEE8021x',
                           'IP',
                           'IPv6rd',
                           'ManagementServer',
                           'NAT',
                           'NeighborDiscovery',
                           'PPP',
                           'QoS',
                           'RouterAdvertisement',
                           'Routing'])

    class Bridging(Device_v2_1.Device.Bridging):
      """Represents Device_v2_2.Device.Bridging."""

      def __init__(self, **defaults):
        Device_v2_1.Device.Bridging.__init__(self, defaults=defaults)
        self.Export(lists=['Filter'])

      class Filter(Device_v2_1.Device.Bridging.Filter):
        """Represents Device_v2_2.Device.Bridging.Filter.{i}."""

        def __init__(self, **defaults):
          Device_v2_1.Device.Bridging.Filter.__init__(self, defaults=defaults)
          self.Export(params=['DHCPType',
                              'DestMACFromClientIDFilter',
                              'DestMACFromUserClassIDFilter',
                              'DestMACFromVendorClassIDFilter',
                              'DestMACFromVendorClassIDFilterExclude',
                              'DestMACFromVendorClassIDFilterv6',
                              'SourceMACFromClientIDFilter',
                              'SourceMACFromUserClassIDFilter',
                              'SourceMACFromVendorClassIDFilter',
                              'SourceMACFromVendorClassIDFilterExclude',
                              'SourceMACFromVendorClassIDFilterv6'])

    class DHCPv4(Device_v2_1.Device.DHCPv4):
      """Represents Device_v2_2.Device.DHCPv4."""

      def __init__(self, **defaults):
        Device_v2_1.Device.DHCPv4.__init__(self, defaults=defaults)
        self.Export(objects=['Relay',
                             'Server'],
                    lists=['Client'])

      class Client(Device_v2_1.Device.DHCPv4.Client):
        """Represents Device_v2_2.Device.DHCPv4.Client.{i}."""

        def __init__(self, **defaults):
          Device_v2_1.Device.DHCPv4.Client.__init__(self, defaults=defaults)
          self.Export(params=['Renew'],
                      lists=['ReqOption',
                             'SentOption'])

        class ReqOption(Device_v2_1.Device.DHCPv4.Client.ReqOption):
          """Represents Device_v2_2.Device.DHCPv4.Client.{i}.ReqOption.{i}."""

          def __init__(self, **defaults):
            Device_v2_1.Device.DHCPv4.Client.ReqOption.__init__(self, defaults=defaults)
            self.Export(params=['Value'])

        class SentOption(Device_v2_1.Device.DHCPv4.Client.SentOption):
          """Represents Device_v2_2.Device.DHCPv4.Client.{i}.SentOption.{i}."""

          def __init__(self, **defaults):
            Device_v2_1.Device.DHCPv4.Client.SentOption.__init__(self, defaults=defaults)
            self.Export(params=['Value'])

      class Relay(Device_v2_1.Device.DHCPv4.Relay):
        """Represents Device_v2_2.Device.DHCPv4.Relay."""

        def __init__(self, **defaults):
          Device_v2_1.Device.DHCPv4.Relay.__init__(self, defaults=defaults)
          self.Export(lists=['Forwarding'])

        class Forwarding(Device_v2_1.Device.DHCPv4.Relay.Forwarding):
          """Represents Device_v2_2.Device.DHCPv4.Relay.Forwarding.{i}."""

          def __init__(self, **defaults):
            Device_v2_1.Device.DHCPv4.Relay.Forwarding.__init__(self, defaults=defaults)
            self.Export(params=['Chaddr',
                                'ChaddrMask',
                                'ClientID',
                                'UserClassID',
                                'VendorClassID'])

      class Server(Device_v2_1.Device.DHCPv4.Server):
        """Represents Device_v2_2.Device.DHCPv4.Server."""

        def __init__(self, **defaults):
          Device_v2_1.Device.DHCPv4.Server.__init__(self, defaults=defaults)
          self.Export(lists=['Pool'])

        class Pool(Device_v2_1.Device.DHCPv4.Server.Pool):
          """Represents Device_v2_2.Device.DHCPv4.Server.Pool.{i}."""

          def __init__(self, **defaults):
            Device_v2_1.Device.DHCPv4.Server.Pool.__init__(self, defaults=defaults)
            self.Export(params=['ClientNumberOfEntries'],
                        lists=['Client',
                               'Option'])

          class Client(core.Exporter):
            """Represents Device_v2_2.Device.DHCPv4.Server.Pool.{i}.Client.{i}."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['Active',
                                  'Alias',
                                  'Chaddr',
                                  'IPv4AddressNumberOfEntries',
                                  'OptionNumberOfEntries'],
                          lists=['IPv4Address',
                                 'Option'])

            class IPv4Address(core.Exporter):
              """Represents Device_v2_2.Device.DHCPv4.Server.Pool.{i}.Client.{i}.IPv4Address.{i}."""

              def __init__(self, **defaults):
                core.Exporter.__init__(self, defaults=defaults)
                self.Export(params=['IPAddress',
                                    'LeaseTimeRemaining'])

            class Option(core.Exporter):
              """Represents Device_v2_2.Device.DHCPv4.Server.Pool.{i}.Client.{i}.Option.{i}."""

              def __init__(self, **defaults):
                core.Exporter.__init__(self, defaults=defaults)
                self.Export(params=['Tag',
                                    'Value'])

          class Option(Device_v2_1.Device.DHCPv4.Server.Pool.Option):
            """Represents Device_v2_2.Device.DHCPv4.Server.Pool.{i}.Option.{i}."""

            def __init__(self, **defaults):
              Device_v2_1.Device.DHCPv4.Server.Pool.Option.__init__(self, defaults=defaults)
              self.Export(params=['Value'])

    class DHCPv6(core.Exporter):
      """Represents Device_v2_2.Device.DHCPv6."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['ClientNumberOfEntries'],
                    objects=['Server'],
                    lists=['Client'])

      class Client(core.Exporter):
        """Represents Device_v2_2.Device.DHCPv6.Client.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'DUID',
                              'Enable',
                              'Interface',
                              'RapidCommit',
                              'ReceivedOptionNumberOfEntries',
                              'Renew',
                              'RequestAddresses',
                              'RequestPrefixes',
                              'RequestedOptions',
                              'SentOptionNumberOfEntries',
                              'ServerNumberOfEntries',
                              'Status',
                              'SuggestedT1',
                              'SuggestedT2',
                              'SupportedOptions'],
                      lists=['ReceivedOption',
                             'SentOption',
                             'Server'])

        class ReceivedOption(core.Exporter):
          """Represents Device_v2_2.Device.DHCPv6.Client.{i}.ReceivedOption.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Server',
                                'Tag',
                                'Value'])

        class SentOption(core.Exporter):
          """Represents Device_v2_2.Device.DHCPv6.Client.{i}.SentOption.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Alias',
                                'Enable',
                                'Tag',
                                'Value'])

        class Server(core.Exporter):
          """Represents Device_v2_2.Device.DHCPv6.Client.{i}.Server.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['DUID',
                                'InformationRefreshTime',
                                'SourceAddress'])

      class Server(core.Exporter):
        """Represents Device_v2_2.Device.DHCPv6.Server."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Enable',
                              'PoolNumberOfEntries'],
                      lists=['Pool'])

        class Pool(core.Exporter):
          """Represents Device_v2_2.Device.DHCPv6.Server.Pool.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Alias',
                                'ClientNumberOfEntries',
                                'DUID',
                                'DUIDExclude',
                                'Enable',
                                'IANAEnable',
                                'IANAManualPrefixes',
                                'IANAPrefixes',
                                'IAPDAddLength',
                                'IAPDEnable',
                                'IAPDManualPrefixes',
                                'IAPDPrefixes',
                                'Interface',
                                'OptionNumberOfEntries',
                                'Order',
                                'SourceAddress',
                                'SourceAddressExclude',
                                'SourceAddressMask',
                                'Status',
                                'UserClassID',
                                'UserClassIDExclude',
                                'VendorClassID',
                                'VendorClassIDExclude'],
                        lists=['Client',
                               'Option'])

          class Client(core.Exporter):
            """Represents Device_v2_2.Device.DHCPv6.Server.Pool.{i}.Client.{i}."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['Active',
                                  'Alias',
                                  'IPv6AddressNumberOfEntries',
                                  'IPv6PrefixNumberOfEntries',
                                  'OptionNumberOfEntries',
                                  'SourceAddress'],
                          lists=['IPv6Address',
                                 'IPv6Prefix',
                                 'Option'])

            class IPv6Address(core.Exporter):
              """Represents Device_v2_2.Device.DHCPv6.Server.Pool.{i}.Client.{i}.IPv6Address.{i}."""

              def __init__(self, **defaults):
                core.Exporter.__init__(self, defaults=defaults)
                self.Export(params=['IPAddress',
                                    'PreferredLifetime',
                                    'ValidLifetime'])

            class IPv6Prefix(core.Exporter):
              """Represents Device_v2_2.Device.DHCPv6.Server.Pool.{i}.Client.{i}.IPv6Prefix.{i}."""

              def __init__(self, **defaults):
                core.Exporter.__init__(self, defaults=defaults)
                self.Export(params=['PreferredLifetime',
                                    'Prefix',
                                    'ValidLifetime'])

            class Option(core.Exporter):
              """Represents Device_v2_2.Device.DHCPv6.Server.Pool.{i}.Client.{i}.Option.{i}."""

              def __init__(self, **defaults):
                core.Exporter.__init__(self, defaults=defaults)
                self.Export(params=['Tag',
                                    'Value'])

          class Option(core.Exporter):
            """Represents Device_v2_2.Device.DHCPv6.Server.Pool.{i}.Option.{i}."""

            def __init__(self, **defaults):
              core.Exporter.__init__(self, defaults=defaults)
              self.Export(params=['Alias',
                                  'Enable',
                                  'PassthroughClient',
                                  'Tag',
                                  'Value'])

    class DNS(Device_v2_1.Device.DNS):
      """Represents Device_v2_2.Device.DNS."""

      def __init__(self, **defaults):
        Device_v2_1.Device.DNS.__init__(self, defaults=defaults)
        self.Export(params=['SupportedRecordTypes'],
                    objects=['Client',
                             'Relay'])

      class Client(Device_v2_1.Device.DNS.Client):
        """Represents Device_v2_2.Device.DNS.Client."""

        def __init__(self, **defaults):
          Device_v2_1.Device.DNS.Client.__init__(self, defaults=defaults)
          self.Export(lists=['Server'])

        class Server(Device_v2_1.Device.DNS.Client.Server):
          """Represents Device_v2_2.Device.DNS.Client.Server.{i}."""

          def __init__(self, **defaults):
            Device_v2_1.Device.DNS.Client.Server.__init__(self, defaults=defaults)
            self.Export(params=['DNSServer',
                                'Interface',
                                'Type'])

      class Relay(Device_v2_1.Device.DNS.Relay):
        """Represents Device_v2_2.Device.DNS.Relay."""

        def __init__(self, **defaults):
          Device_v2_1.Device.DNS.Relay.__init__(self, defaults=defaults)
          self.Export(lists=['Forwarding'])

        class Forwarding(Device_v2_1.Device.DNS.Relay.Forwarding):
          """Represents Device_v2_2.Device.DNS.Relay.Forwarding.{i}."""

          def __init__(self, **defaults):
            Device_v2_1.Device.DNS.Relay.Forwarding.__init__(self, defaults=defaults)
            self.Export(params=['DNSServer',
                                'Interface',
                                'Type'])

    class DSLite(core.Exporter):
      """Represents Device_v2_2.Device.DSLite."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['Enable',
                            'InterfaceSettingNumberOfEntries'],
                    lists=['InterfaceSetting'])

      class InterfaceSetting(core.Exporter):
        """Represents Device_v2_2.Device.DSLite.InterfaceSetting.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'Enable',
                              'EndpointAddress',
                              'EndpointAssignmentPrecedence',
                              'EndpointName',
                              'Origin',
                              'Status',
                              'TunnelInterface',
                              'TunneledInterface'])

    class Firewall(core.Exporter):
      """Represents Device_v2_2.Device.Firewall."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['AdvancedLevel',
                            'ChainNumberOfEntries',
                            'Config',
                            'Enable',
                            'LevelNumberOfEntries',
                            'Type'],
                    lists=['Chain',
                           'Level'])

      class Chain(core.Exporter):
        """Represents Device_v2_2.Device.Firewall.Chain.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'Creator',
                              'Enable',
                              'Name',
                              'RuleNumberOfEntries'],
                      lists=['Rule'])

        class Rule(core.Exporter):
          """Represents Device_v2_2.Device.Firewall.Chain.{i}.Rule.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Alias',
                                'CreationDate',
                                'DSCP',
                                'DSCPExclude',
                                'Description',
                                'DestAllInterfaces',
                                'DestIP',
                                'DestIPExclude',
                                'DestInterface',
                                'DestInterfaceExclude',
                                'DestMask',
                                'DestPort',
                                'DestPortExclude',
                                'DestPortRangeMax',
                                'Enable',
                                'ExpiryDate',
                                'IPVersion',
                                'Log',
                                'Order',
                                'Protocol',
                                'ProtocolExclude',
                                'SourceAllInterfaces',
                                'SourceIP',
                                'SourceIPExclude',
                                'SourceInterface',
                                'SourceInterfaceExclude',
                                'SourceMask',
                                'SourcePort',
                                'SourcePortExclude',
                                'SourcePortRangeMax',
                                'Status',
                                'Target',
                                'TargetChain'])

      class Level(core.Exporter):
        """Represents Device_v2_2.Device.Firewall.Level.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'Chain',
                              'DefaultLogPolicy',
                              'DefaultPolicy',
                              'Description',
                              'Name',
                              'Order',
                              'PortMappingEnabled'])

    class Hosts(Device_v2_1.Device.Hosts):
      """Represents Device_v2_2.Device.Hosts."""

      def __init__(self, **defaults):
        Device_v2_1.Device.Hosts.__init__(self, defaults=defaults)
        self.Export(lists=['Host'])

      class Host(Device_v2_1.Device.Hosts.Host):
        """Represents Device_v2_2.Device.Hosts.Host.{i}."""

        def __init__(self, **defaults):
          Device_v2_1.Device.Hosts.Host.__init__(self, defaults=defaults)
          self.Export(params=['AddressSource',
                              'AssociatedDevice',
                              'ClientID',
                              'DHCPClient',
                              'IPAddress',
                              'IPv4AddressNumberOfEntries',
                              'IPv6AddressNumberOfEntries',
                              'LeaseTimeRemaining',
                              'UserClassID',
                              'VendorClassID'],
                      lists=['IPv4Address',
                             'IPv6Address'])

        class IPv4Address(core.Exporter):
          """Represents Device_v2_2.Device.Hosts.Host.{i}.IPv4Address.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['IPAddress'])

        class IPv6Address(core.Exporter):
          """Represents Device_v2_2.Device.Hosts.Host.{i}.IPv6Address.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['IPAddress'])

    class IEEE8021x(Device_v2_1.Device.IEEE8021x):
      """Represents Device_v2_2.Device.IEEE8021x."""

      def __init__(self, **defaults):
        Device_v2_1.Device.IEEE8021x.__init__(self, defaults=defaults)
        self.Export(lists=['Supplicant'])

      class Supplicant(Device_v2_1.Device.IEEE8021x.Supplicant):
        """Represents Device_v2_2.Device.IEEE8021x.Supplicant.{i}."""

        def __init__(self, **defaults):
          Device_v2_1.Device.IEEE8021x.Supplicant.__init__(self, defaults=defaults)
          self.Export(params=['Disconnect',
                              'Reset'])

    class IP(Device_v2_1.Device.IP):
      """Represents Device_v2_2.Device.IP."""

      def __init__(self, **defaults):
        Device_v2_1.Device.IP.__init__(self, defaults=defaults)
        self.Export(params=['IPv4Enable',
                            'IPv4Status',
                            'IPv6Capable',
                            'IPv6Enable',
                            'IPv6Status',
                            'ULAPrefix'],
                    objects=['Diagnostics'],
                    lists=['Interface'])

      class Diagnostics(Device_v2_1.Device.IP.Diagnostics):
        """Represents Device_v2_2.Device.IP.Diagnostics."""

        def __init__(self, **defaults):
          Device_v2_1.Device.IP.Diagnostics.__init__(self, defaults=defaults)
          self.Export(objects=['IPPing',
                               'TraceRoute'])

        class IPPing(Device_v2_1.Device.IP.Diagnostics.IPPing):
          """Represents Device_v2_2.Device.IP.Diagnostics.IPPing."""

          def __init__(self, **defaults):
            Device_v2_1.Device.IP.Diagnostics.IPPing.__init__(self, defaults=defaults)
            self.Export(params=['Host'])

        class TraceRoute(Device_v2_1.Device.IP.Diagnostics.TraceRoute):
          """Represents Device_v2_2.Device.IP.Diagnostics.TraceRoute."""

          def __init__(self, **defaults):
            Device_v2_1.Device.IP.Diagnostics.TraceRoute.__init__(self, defaults=defaults)
            self.Export(params=['Host'])

      class Interface(Device_v2_1.Device.IP.Interface):
        """Represents Device_v2_2.Device.IP.Interface.{i}."""

        def __init__(self, **defaults):
          Device_v2_1.Device.IP.Interface.__init__(self, defaults=defaults)
          self.Export(params=['Enable',
                              'IPv4Enable',
                              'IPv6AddressNumberOfEntries',
                              'IPv6Enable',
                              'IPv6PrefixNumberOfEntries',
                              'Reset',
                              'ULAEnable'],
                      objects=['Stats'],
                      lists=['IPv4Address',
                             'IPv6Address',
                             'IPv6Prefix'])

        class IPv4Address(Device_v2_1.Device.IP.Interface.IPv4Address):
          """Represents Device_v2_2.Device.IP.Interface.{i}.IPv4Address.{i}."""

          def __init__(self, **defaults):
            Device_v2_1.Device.IP.Interface.IPv4Address.__init__(self, defaults=defaults)
            self.Export(params=['Alias',
                                'Status'])

        class IPv6Address(core.Exporter):
          """Represents Device_v2_2.Device.IP.Interface.{i}.IPv6Address.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Alias',
                                'Anycast',
                                'Enable',
                                'IPAddress',
                                'IPAddressStatus',
                                'Origin',
                                'PreferredLifetime',
                                'Prefix',
                                'Status',
                                'ValidLifetime'])

        class IPv6Prefix(core.Exporter):
          """Represents Device_v2_2.Device.IP.Interface.{i}.IPv6Prefix.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Alias',
                                'Autonomous',
                                'ChildPrefixBits',
                                'Enable',
                                'OnLink',
                                'Origin',
                                'ParentPrefix',
                                'PreferredLifetime',
                                'Prefix',
                                'PrefixStatus',
                                'StaticType',
                                'Status',
                                'ValidLifetime'])

        class Stats(Device_v2_1.Device.IP.Interface.Stats):
          """Represents Device_v2_2.Device.IP.Interface.{i}.Stats."""

          def __init__(self, **defaults):
            Device_v2_1.Device.IP.Interface.Stats.__init__(self, defaults=defaults)
            self.Export(params=['BroadcastPacketsReceived',
                                'BroadcastPacketsSent'])

    class IPv6rd(core.Exporter):
      """Represents Device_v2_2.Device.IPv6rd."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['Enable',
                            'InterfaceSettingNumberOfEntries'],
                    lists=['InterfaceSetting'])

      class InterfaceSetting(core.Exporter):
        """Represents Device_v2_2.Device.IPv6rd.InterfaceSetting.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['AddressSource',
                              'Alias',
                              'AllTrafficToBorderRelay',
                              'BorderRelayIPv4Addresses',
                              'Enable',
                              'IPv4MaskLength',
                              'SPIPv6Prefix',
                              'Status',
                              'TunnelInterface',
                              'TunneledInterface'])

    class ManagementServer(Device_v2_1.Device.ManagementServer):
      """Represents Device_v2_2.Device.ManagementServer."""

      def __init__(self, **defaults):
        Device_v2_1.Device.ManagementServer.__init__(self, defaults=defaults)
        self.Export(params=['ConnectionRequestURL',
                            'UDPConnectionRequestAddress'])

    class NAT(Device_v2_1.Device.NAT):
      """Represents Device_v2_2.Device.NAT."""

      def __init__(self, **defaults):
        Device_v2_1.Device.NAT.__init__(self, defaults=defaults)
        self.Export(lists=['InterfaceSetting'])

      class InterfaceSetting(Device_v2_1.Device.NAT.InterfaceSetting):
        """Represents Device_v2_2.Device.NAT.InterfaceSetting.{i}."""

        def __init__(self, **defaults):
          Device_v2_1.Device.NAT.InterfaceSetting.__init__(self, defaults=defaults)
          self.Export(params=['Status'])

    class NeighborDiscovery(core.Exporter):
      """Represents Device_v2_2.Device.NeighborDiscovery."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['Enable',
                            'InterfaceSettingNumberOfEntries'],
                    lists=['InterfaceSetting'])

      class InterfaceSetting(core.Exporter):
        """Represents Device_v2_2.Device.NeighborDiscovery.InterfaceSetting.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Alias',
                              'Enable',
                              'Interface',
                              'MaxRtrSolicitations',
                              'NUDEnable',
                              'RSEnable',
                              'RetransTimer',
                              'RtrSolicitationInterval',
                              'Status'])

    class PPP(Device_v2_1.Device.PPP):
      """Represents Device_v2_2.Device.PPP."""

      def __init__(self, **defaults):
        Device_v2_1.Device.PPP.__init__(self, defaults=defaults)
        self.Export(params=['SupportedNCPs'],
                    lists=['Interface'])

      class Interface(Device_v2_1.Device.PPP.Interface):
        """Represents Device_v2_2.Device.PPP.Interface.{i}."""

        def __init__(self, **defaults):
          Device_v2_1.Device.PPP.Interface.__init__(self, defaults=defaults)
          self.Export(params=['IPCPEnable',
                              'IPv6CPEnable',
                              'Reset'],
                      objects=['IPv6CP',
                               'PPPoA'])

        class IPv6CP(core.Exporter):
          """Represents Device_v2_2.Device.PPP.Interface.{i}.IPv6CP."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['LocalInterfaceIdentifier',
                                'RemoteInterfaceIdentifier'])

        class PPPoA(core.Exporter):
          """Represents Device_v2_2.Device.PPP.Interface.{i}.PPPoA."""
          pass

    class QoS(Device_v2_1.Device.QoS):
      """Represents Device_v2_2.Device.QoS."""

      def __init__(self, **defaults):
        Device_v2_1.Device.QoS.__init__(self, defaults=defaults)
        self.Export(lists=['Classification'])

      class Classification(Device_v2_1.Device.QoS.Classification):
        """Represents Device_v2_2.Device.QoS.Classification.{i}."""

        def __init__(self, **defaults):
          Device_v2_1.Device.QoS.Classification.__init__(self, defaults=defaults)
          self.Export(params=['DHCPType',
                              'DSCPCheck',
                              'DestClientID',
                              'DestUserClassID',
                              'DestVendorClassID',
                              'DestVendorClassIDExclude',
                              'DestVendorClassIDv6',
                              'DestVendorSpecificInfo',
                              'Protocol',
                              'SourceClientID',
                              'SourceUserClassID',
                              'SourceVendorClassID',
                              'SourceVendorClassIDExclude',
                              'SourceVendorClassIDv6',
                              'SourceVendorSpecificInfo'])

    class RouterAdvertisement(core.Exporter):
      """Represents Device_v2_2.Device.RouterAdvertisement."""

      def __init__(self, **defaults):
        core.Exporter.__init__(self, defaults=defaults)
        self.Export(params=['Enable',
                            'InterfaceSettingNumberOfEntries'],
                    lists=['InterfaceSetting'])

      class InterfaceSetting(core.Exporter):
        """Represents Device_v2_2.Device.RouterAdvertisement.InterfaceSetting.{i}."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['AdvCurHopLimit',
                              'AdvDefaultLifetime',
                              'AdvLinkMTU',
                              'AdvManagedFlag',
                              'AdvMobileAgentFlag',
                              'AdvNDProxyFlag',
                              'AdvOtherConfigFlag',
                              'AdvPreferredRouterFlag',
                              'AdvReachableTime',
                              'AdvRetransTimer',
                              'Alias',
                              'Enable',
                              'Interface',
                              'ManualPrefixes',
                              'MaxRtrAdvInterval',
                              'MinRtrAdvInterval',
                              'OptionNumberOfEntries',
                              'Prefixes',
                              'Status'],
                      lists=['Option'])

        class Option(core.Exporter):
          """Represents Device_v2_2.Device.RouterAdvertisement.InterfaceSetting.{i}.Option.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Alias',
                                'Enable',
                                'Tag',
                                'Value'])

    class Routing(Device_v2_1.Device.Routing):
      """Represents Device_v2_2.Device.Routing."""

      def __init__(self, **defaults):
        Device_v2_1.Device.Routing.__init__(self, defaults=defaults)
        self.Export(objects=['RIP',
                             'RouteInformation'],
                    lists=['Router'])

      class RIP(Device_v2_1.Device.Routing.RIP):
        """Represents Device_v2_2.Device.Routing.RIP."""

        def __init__(self, **defaults):
          Device_v2_1.Device.Routing.RIP.__init__(self, defaults=defaults)
          self.Export(lists=['InterfaceSetting'])

        class InterfaceSetting(Device_v2_1.Device.Routing.RIP.InterfaceSetting):
          """Represents Device_v2_2.Device.Routing.RIP.InterfaceSetting.{i}."""

          def __init__(self, **defaults):
            Device_v2_1.Device.Routing.RIP.InterfaceSetting.__init__(self, defaults=defaults)
            self.Export(params=['Version'])

      class RouteInformation(core.Exporter):
        """Represents Device_v2_2.Device.Routing.RouteInformation."""

        def __init__(self, **defaults):
          core.Exporter.__init__(self, defaults=defaults)
          self.Export(params=['Enable',
                              'InterfaceSettingNumberOfEntries'],
                      lists=['InterfaceSetting'])

        class InterfaceSetting(core.Exporter):
          """Represents Device_v2_2.Device.Routing.RouteInformation.InterfaceSetting.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Interface',
                                'PreferredRouteFlag',
                                'Prefix',
                                'RouteLifetime',
                                'SourceRouter',
                                'Status'])

      class Router(Device_v2_1.Device.Routing.Router):
        """Represents Device_v2_2.Device.Routing.Router.{i}."""

        def __init__(self, **defaults):
          Device_v2_1.Device.Routing.Router.__init__(self, defaults=defaults)
          self.Export(params=['IPv6ForwardingNumberOfEntries'],
                      lists=['IPv4Forwarding',
                             'IPv6Forwarding'])

        class IPv4Forwarding(Device_v2_1.Device.Routing.Router.IPv4Forwarding):
          """Represents Device_v2_2.Device.Routing.Router.{i}.IPv4Forwarding.{i}."""

          def __init__(self, **defaults):
            Device_v2_1.Device.Routing.Router.IPv4Forwarding.__init__(self, defaults=defaults)
            self.Export(params=['Origin',
                                'Status'])

        class IPv6Forwarding(core.Exporter):
          """Represents Device_v2_2.Device.Routing.Router.{i}.IPv6Forwarding.{i}."""

          def __init__(self, **defaults):
            core.Exporter.__init__(self, defaults=defaults)
            self.Export(params=['Alias',
                                'DestIPPrefix',
                                'Enable',
                                'ExpirationTime',
                                'ForwardingMetric',
                                'ForwardingPolicy',
                                'Interface',
                                'NextHop',
                                'Origin',
                                'Status'])

  class UserInterface(Device_v2_1.UserInterface):
    """Represents Device_v2_2.UserInterface."""

    def __init__(self, **defaults):
      Device_v2_1.UserInterface.__init__(self, defaults=defaults)
      self.Export(params=['PasswordReset'])


if __name__ == '__main__':
  print core.DumpSchema(Device_v2_2)
